(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{552:function(t,n,e){"use strict";e.r(n);var a=e(16),i=function(t){t.options.__data__block__={markmap_1a96284d:"# Mysql \n* 表设计\n\t- 三大范式\n\t\t- 每个列不可拆分\n\t\t- 非主键完全依赖逐渐\n\t\t- 非主键之依赖主键，不能依赖其他非主键\n- 存储引擎（Storage engine）\n\t- innodb引擎（默认）\n\t\t- 支持事务\n\t\t\t- 默认不适用事务\n\t\t- 聚簇索引\n\t\t- 主键索引非常高效\n\t\t- 并发量高和事务\n\t- MyIASM引擎(原本Mysql的默认引擎)\n\t\t- 不支持事务\n\t\t- 非聚簇索引\n\t\t- 适合读写为主\n\t- MEMORY引擎：所有的数据都在内存中\n- 索引\n\t- 优点\n\t\t- 加快数据检索\n\t\t- 优化隐藏器\n\t- 缺点\n\t\t- 创建和维护索引需要时间，降低更新效率\n\t\t- 索引占用物理空间\n\t- **创建索引的原则**\n\t\t- 最左匹配，向右匹配到范围查询\n\t\t- 频繁查询的字段\n\t\t- 频繁更新的字段不适合\n\t\t- 外键的数据列一定要创建索引\n\t\t- 类型数据量大的不要创建索引\n\t- 使用场景\n\t\t- where\n\t\t- order by\n\t\t\t- 所有数据从磁盘读取到内存进行排序很耗时\n\t\t- join\n\t\t\t- 对连接字段建立索引提升效率\n\t\t- like\n\t\t\t- 会使索引失效\n\t- 类型\n\t\t- 主键索引\n\t\t\t- 不能为null\n\t\t\t- 只能有一个主键\n\t\t- 唯一索引\n\t\t\t- 数据不允许重复\n\t\t- 普通索引\n\t\t- 全文索引\n\t- **数据结构**\n\t\t- B+树索引（=,>,>=,<,<=和between）\n\t\t\t- 原理\n\t\t\t\t- 最常见的索引\n\t\t\t\t- 叶子结点保存了关键字信息和指针\n\t\t\t\t- 非叶子节点都是索引部分\n\t\t\t\t- 数据的插入和删除在叶子节点进行\n\t\t\t- 特点\n\t\t\t\t- 稳定性该，查询速度快\n\t\t- B树\n\t\t\t- 内部节点可以同时存储键和值\n\t\t- 哈希索引（=）\n\t\t\t- 原理\n\t\t\t\t- Hash算法\n\t\t\t\t- 字段数据转换成定长的Hash值\n\t\t\t- 特点\n\t\t\t\t- hash索引等值查询更快\n\t\t\t\t- 无法进行范围索引\n\t\t\t\t- 不支持排序\n\t- 使用方式\n\t\t- CREATE TABLE\n\t\t\t- KEY\n\t\t- ALTER TABLE\n\t\t\t- ADD INDEX\n\t\t- CREATE INDEX\n\t\t- drop primary key\n- 数据类型\n\t- 整数\n\t\t- tinyInt\n\t\t- smallint\n\t\t- mediumint\n\t\t- int(integer)\n\t- 小数\n\t\t- float\n\t\t- double\n\t\t- decimal(m,d) 效率低一点\n\t- 日期\n\t\t- year\n\t\t- time\n\t\t- date\n\t\t- datetime\n\t\t- timestamp 推荐\n\t- 文本、二进制\n\t\t- CHAR(M) 效率高\n\t\t- VARCHAR(M)\n\t\t- TINYBLOB\n\t\t- BLOB 额外性能开销\n\t\t- ....\n\t\t- TEXT\n- 数据库事务\n\t- ACID\n\t\t- 原子性\n\t\t- 一致性\n\t\t- 隔离性\n\t\t- 持久性\n\t- 隔离级别\n\t\t- READ-UNCOMMITTED(读取未提交) 脏读\n\t\t- REPEATABLE-READ(可重复读) 幻读，不可重复度\n\t\t- READ-COMMITTED(读取已提交) 不可重复读\n\t\t- SERIALIZABLE(可串行化)\n- 锁\n\t- 类型\n\t\t- 行级锁(INNODB引擎)\n\t\t\t- 只针对当前操作的行进行加锁\n\t\t\t- 开销大，加锁慢\n\t\t\t- 锁冲突的概率最低\n\t\t\t- 并发度高\n\t\t- 表级锁(MYISAM引擎)\n\t\t\t- 开销小，加锁快\n\t\t\t- 发出锁冲突的概率最高\n\t\t\t- 并发度最低\n\t\t- 页级锁(BDB引擎 )\n\t\t\t- 开销和加锁时间界于表锁和行锁之间\n\t- 死锁`多个事务在同一资源上相互占用，并请求锁定对方的资源`\n\t\t- 乐观锁`多读`\n\t\t- 悲观锁`多写`\n\t- SQL语句\n\t\t- 分类\n\t\t\t- DDL\n\t\t\t- DQL\n\t\t\t- DML\n\t\t\t- DCL\n\t\t- 连接查询\n\t\t\t- 内连接\n\t\t\t- 外连接\n\t\t\t\t- 左外\n\t\t\t\t- 右外\n\t\t\t- 交叉连接\n\t\t- 子查询\n\t\t- 关键字语句\n\t\t\t- in 小表\n\t\t\t- exits 大表\n\t\t\t- limit\n\t\t\t- rowNum\n\t- SQL优化\n\t\t- 常规\n\t\t\t- 尽量不用 select *\n\t\t\t- 减少子查询\n\t\t\t- 尽量少用in和not in\n\t\t\t- 尽量避免 ！= 或 < > 操作符\n\t\t\t- 避免在where做null值判断\n\t\t- 执行计划`explan`\n\t\t\t- 查看是否使用索引\n\t\t\t- 访问类型\n\t\t\t\t- ALL 扫描全表\n\t\t\t\t- index 遍历索引\n\t\t- 大表数据量查询\n\t\t\t- 优化schema、sql语句+索引\n\t\t\t- 加缓存 memcached, redis\n\t\t\t- 主从复制、读写分离\n\t\t\t- 垂直拆分 （按字段）\n\t\t\t- 水平拆分（分表）\n\t\t- 存储过程\n\t\t\t- CREATE PROCEDURE"}},s=Object(a.a)({},(function(){var t=this.$createElement,n=this._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h1",{attrs:{id:"mysql"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mysql"}},[this._v("#")]),this._v(" Mysql")]),this._v(" "),n("Markmap",{attrs:{id:"markmap_1a96284d",code:this.$dataBlock.markmap_1a96284d}})],1)}),[],!1,null,null,null);"function"==typeof i&&i(s);n.default=s.exports}}]);