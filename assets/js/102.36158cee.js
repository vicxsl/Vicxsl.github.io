(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{540:function(n,t,a){"use strict";a.r(t);var e=a(16),s=function(n){n.options.__data__block__={markmap_1a96284d:"# **微服务**\n\n## 高可用\n\n###     超时与重试\n\n####         代理层超时与重试\n\n####         web容器超时\n\n####         中间件客户端超时重试\n\n####         数据库客户端超时\n\n####         NoSQL客户端超时\n\n####         业务超时\n\n####         前端Ajax超时\n\n###     回滚\n\n####         事务回滚\n\n####         代码库回滚\n\n####         部署版本回滚\n\n####         数据版本回滚\n\n####         静态版本回滚\n\n####         静态资源版本回滚\n\n###     压测与预案\n\n###         系统压测：\n\n####    压测方案：压测接口/并发量/压测策略、压测指标\n\n####    压测报告：机器负载/QPS/响应时间/成功率\n\n####    压测方式：线上/线下压测\n\n####    读写/防真/离散/全链路压测\n\n###         系统优化和容灾：\n\n####    单机调优\n\n####    架构优化/系统扩容\n\n####    跨及房容灾\n\n###         应急预案\n\n####    网络接入层：DNS/LVS/HaProxy\n\n####    应用接入层：Nginx/OpenResty\n\n####    WEB应用层：Tomcat\n\n####    服务层：Dubbo\n\n####    数据层：Redis/DB\n\n###         监控报警：\n\n####    服务器监控/系统监控/JVM监控/接口监控\n\n####    报警策略：监控时间段、报警阀值、通知方式\n\n###     负载均衡\n\n####         负载均衡算法\n\n####         失败重试机制\n\n####         健康检查机制\n\n####         动态负载均衡\n\n###     限流\n\n####         限流算法\n\n####         应用级限流\n\n####         分布式限流\n\n####         接入层限流\n\n###     降级\n\n####         降级预案\n\n####         自动降级/开关降级\n\n####         多级降级\n\n####         配置中心\n\n####         使用Hystrix降级\n\n####         使用Hystrix熔断\n\n###     隔离\n\n####         进程线程隔离\n\n####         集群/机房隔离\n\n####         读写隔离\n\n####         动静隔离\n\n####         使用Hystrix隔离\n\n####         基于Servlet3的请求隔离\n\n## 高并发\n\n###     异步并发\n\n####         同步阻塞调研\n\n####         异步Future\n\n####         异步Callback\n\n####         异步编排Completablefuture\n\n####         请求缓存\n\n####         请求合并\n\n###     扩容\n\n####         单体应用垂直扩容\n\n####         单体应用水平扩容\n\n####         应用拆分\n\n####         数据库：水平/垂直拆分\n\n####         使用sharding-jdbc 分库分表/读写分离\n\n#### \t\t数据异构\n\n####         任务系统扩容（Elastic-Job）\n\n###     队列\n\n####         异步处理/系统解耦\n\n#### \t\t数据同步/流量削峰\n\n####         缓冲队列/任务队列/消息队列\n\n#### \t\t请求队列/数据总线队列\n\n####         Disruptor+redis队列\n\n####         基于Canal实现数据异构\n\n###     池化\n\n####         数据库连接池\n\n####         HttpClient连接池\n\n####         线程池\n\n###     多级缓存\n\n####         分布式缓存\n\n####         热点数据与更新缓存\n\n####         更新缓存与原子性\n\n####         缓存崩溃与快速修复\n\n###     HTTP缓存\n\n####         浏览器缓存\n\n####         HttpClient客户端缓存\n\n####         Nginx代理层缓存\n\n###     应用级缓存\n\n####         缓存回收策略：空间/容量/时间\n\n####         缓存回收算法\n\n#### \t\tFIFO/LRU/LFU\n\n####         java堆/java堆外/磁盘缓存\n\n####         Guava/Ehcache/MapDB\n\n####         缓存使用模式 Cache-Aside/Cache-As-SoR/CopyPattern"}},r=Object(e.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h1",{attrs:{id:"微服务思维导图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微服务思维导图"}},[this._v("#")]),this._v(" 微服务思维导图")]),this._v(" "),t("Markmap",{attrs:{id:"markmap_1a96284d",code:this.$dataBlock.markmap_1a96284d}})],1)}),[],!1,null,null,null);"function"==typeof s&&s(r);t.default=r.exports}}]);