(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{637:function(t,s,a){"use strict";a.r(s);var n=a(16),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"java并发十二连招-你能接住吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java并发十二连招-你能接住吗"}},[t._v("#")]),t._v(" JAVA并发十二连招，你能接住吗？")]),t._v(" "),a("p",[t._v("话不多说，干货走起。\n")]),t._v(" "),a("h2",{attrs:{id:"hashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[t._v("#")]),t._v(" HashMap")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://gitee.com/vicxsl/img/raw/master/img/1629436095227/image-20210820130814803.png",alt:"image-20210820130814803"}}),t._v(" "),a("p",[t._v("面试第一题必问的HashMap，挺考验javaer的基础功底的，别问为啥放在这，因为重要！HashMap具有如下特性：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("HashMap 的存取是没有顺序的。")]),t._v(" "),a("li",[t._v("KV 均允许为 NULL。")]),t._v(" "),a("li",[t._v("多线程情况下该类不安全，可以考虑用 HashTable。")]),t._v(" "),a("li",[t._v("JDk8底层是数组 + 链表 + 红黑树，JDK7底层是数组 + 链表。")]),t._v(" "),a("li",[t._v("初始容量和装载因子是决定整个类性能的关键点，轻易不要动。")]),t._v(" "),a("li",[t._v("HashMap是"),a("strong",[t._v("懒汉式")]),t._v("创建的，只有在你put数据时候才会 build。")]),t._v(" "),a("li",[t._v("单向链表转换为红黑树的时候会先变化为"),a("strong",[t._v("双向链表")]),t._v("最终转换为"),a("strong",[t._v("红黑树")]),t._v("，切记双向链表跟红黑树是"),a("code",[t._v("共存")]),t._v("的。")]),t._v(" "),a("li",[t._v("对于传入的两个"),a("code",[t._v("key")]),t._v("，会强制性的判别出个高低，目的是为了决定向左还是向右放置数据。")]),t._v(" "),a("li",[t._v("链表转红黑树后会努力将红黑树的"),a("code",[t._v("root")]),t._v("节点和链表的头节点 跟"),a("code",[t._v("table[i]")]),t._v("节点融合成一个。")]),t._v(" "),a("li",[t._v("在删除的时候是先判断删除节点红黑树个数是否需要转链表，不转链表就跟"),a("code",[t._v("RBT")]),t._v("类似，找个合适的节点来填充已删除的节点。")]),t._v(" "),a("li",[t._v("红黑树的"),a("code",[t._v("root")]),t._v("节点"),a("code",[t._v("不一定")]),t._v("跟"),a("code",[t._v("table[i]")]),t._v("也就是链表的头节点是同一个，三者同步是靠"),a("code",[t._v("MoveRootToFront")]),t._v("实现的。而"),a("code",[t._v("HashIterator.remove()")]),t._v("会在调用"),a("code",[t._v("removeNode")]),t._v("的时候"),a("code",[t._v("movable=false")]),t._v("。")])])]),t._v(" "),a("p",[t._v("常见HashMap考点：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("HashMap原理，内部数据结构。")]),t._v(" "),a("li",[t._v("HashMap中的put、get、remove大致过程。")]),t._v(" "),a("li",[t._v("HashMap中 hash函数实现。")]),t._v(" "),a("li",[t._v("HashMap如何扩容。")]),t._v(" "),a("li",[t._v("HashMap几个重要参数为什么这样设定。")]),t._v(" "),a("li",[t._v("HashMap为什么线程不安全，如何替换。")]),t._v(" "),a("li",[t._v("HashMap在JDK7跟JDK8中的区别。")]),t._v(" "),a("li",[t._v("HashMap中链表跟红黑树切换思路。")]),t._v(" "),a("li",[t._v("JDK7中 "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247485348&idx=1&sn=fed45652fa26f374b5229b401e74ca2c&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("HashMap环产生原理"),a("OutboundLink")],1),t._v("。")])])]),t._v(" "),a("h2",{attrs:{id:"concurrenthashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap"}},[t._v("#")]),t._v(" ConcurrentHashMap")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247487563&idx=1&sn=0a223ae2bba963e3ac40b7ce6d9ecd56&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("ConcurrentHashMap"),a("OutboundLink")],1),t._v(" 是多线程模式下常用的并发容器，它的实现在"),a("strong",[t._v("JDK7")]),t._v("跟"),a("strong",[t._v("JDK8")]),t._v("区别挺大的。")]),t._v(" "),a("h3",{attrs:{id:"jdk7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk7"}},[t._v("#")]),t._v(" JDK7")]),t._v(" "),a("p",[a("strong",[t._v("JDK7")]),t._v("中的 "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247487563&idx=1&sn=0a223ae2bba963e3ac40b7ce6d9ecd56&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("ConcurrentHashMap"),a("OutboundLink")],1),t._v(" 使用 "),a("strong",[t._v("Segment")]),t._v(" + "),a("strong",[t._v("HashEntry")]),t._v(" 分段锁实现并发，它的"),a("strong",[t._v("缺点")]),t._v("是并发程度是由"),a("strong",[t._v("Segment")]),t._v(" 数组个数来决定的，并发度一旦初始化无法扩容，扩容的话只是"),a("strong",[t._v("HashEntry")]),t._v("的扩容。")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/vicxsl/img/raw/master/img/1629436519561/image-20210820131519148.png",alt:"image-20210820131519148"}}),t._v(" "),a("p",[a("strong",[t._v("Segment")]),t._v("（段） 继承自 "),a("strong",[t._v("ReentrantLock")]),t._v("，在此扮演锁的角色。可以理解为我们的每个"),a("strong",[t._v("Segment")]),t._v("都是实现了"),a("strong",[t._v("Lock")]),t._v("功能的"),a("strong",[t._v("HashMap")]),t._v("。如果我们同时有多个"),a("strong",[t._v("Segment")]),t._v("形成了"),a("strong",[t._v("Segment")]),t._v("数组那我们就可以实现并发咯。")]),t._v(" "),a("p",[t._v("大致的"),a("strong",[t._v("put")]),t._v("流程如下：")]),t._v(" "),a("img",{attrs:{src:"https://gitee.com/vicxsl/img/raw/master/img/1629436703542/image-20210820131823169.png",alt:"image-20210820131823169"}}),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("ConcurrentHashMap")]),t._v("底层大致实现？")]),t._v(" "),a("blockquote",[a("p",[t._v("ConcurrentHashMap允许多个修改操作"),a("strong",[t._v("并发进行")]),t._v("，其关键在于使用了"),a("code",[t._v("锁分离技术")]),t._v("。它使用了多个锁来控制对hash表的不同部分进行的修改。内部使用段(Segment)来表示这些不同的部分，每个段其实就是一个小的HashTable，只要多个修改操作发生在不同的段上就可以并发进行。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("ConcurrentHashMap")]),t._v("在并发下的情况下如何保证取得的元素是最新的？")]),t._v(" "),a("blockquote",[a("p",[t._v("用于存储键值对数据的"),a("strong",[t._v("HashEntry")]),t._v("，在设计上它的成员变量"),a("strong",[t._v("value")]),t._v("跟"),a("strong",[t._v("next")]),t._v("都是"),a("code",[t._v("volatile")]),t._v("类型的，这样就保证别的线程对value值的修改，get方法可以马上看到，并且get的时候是"),a("strong",[t._v("不用加锁的")]),t._v("。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("ConcurrentHashMap")]),t._v("的"),a("strong",[t._v("弱一致性")]),t._v("体现在clear和get方法，原因在于"),a("strong",[t._v("没有加锁")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("比如迭代器在遍历数据的时候是一个"),a("strong",[t._v("Segment")]),t._v("一个"),a("strong",[t._v("Segment")]),t._v("去遍历的，如果在遍历完一个"),a("strong",[t._v("Segment")]),t._v("时正好有一个线程在刚遍历完的"),a("strong",[t._v("Segment")]),t._v("上插入数据，就会体现出不一致性。"),a("strong",[t._v("clear")]),t._v("也是一样。"),a("strong",[t._v("get")]),t._v("方法和"),a("strong",[t._v("containsKey")]),t._v("方法都是遍历对应索引位上所有节点，都是不加锁来判断的，如果是修改性质的因为可见性的存在可以直接获得最新值，不过如果是新添加值则"),a("strong",[t._v("无法保持一致性")]),t._v("。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("size")]),t._v(" 统计个数"),a("strong",[t._v("不准确")])]),t._v(" "),a("blockquote",[a("p",[t._v("size方法比较有趣，先无锁的统计所有的数据量看下前后两次是否数据一样，如果一样则返回数据，如果不一样则要把全部的segment进行加锁，统计，解锁。并且size方法只是返回一个"),a("strong",[t._v("统计性")]),t._v("的数字。")])])])]),t._v(" "),a("h3",{attrs:{id:"jdk8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk8"}},[t._v("#")]),t._v(" JDK8")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247487563&idx=1&sn=0a223ae2bba963e3ac40b7ce6d9ecd56&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("ConcurrentHashMap"),a("OutboundLink")],1),t._v(" 在"),a("strong",[t._v("JDK8")]),t._v("中抛弃了分段锁，转为用 "),a("strong",[t._v("CAS")]),t._v(" + "),a("strong",[t._v("synchronized")]),t._v("，同时将"),a("strong",[t._v("HashEntry")]),t._v("改为"),a("strong",[t._v("Node")]),t._v("，还加入了"),a("strong",[t._v("红黑树")]),t._v("的实现，主要还是看"),a("strong",[t._v("put")]),t._v("的流程(如果看了"),a("strong",[t._v("扩容")]),t._v("这块，绝对可以好好吹逼一番)。")]),t._v(" "),a("img",{staticStyle:{zoom:"150%"},attrs:{src:"https://gitee.com/vicxsl/img/raw/master/img/1629437269531/image-20210820132749121.png",alt:"image-20210820132749121"}}),t._v(" "),a("p",[a("strong",[t._v("ConcurrentHashMap")]),t._v(" 是如果来做到"),a("code",[t._v("高效并发安全")]),t._v("？")]),t._v(" "),a("ol",[a("li",[t._v("读操作")])]),t._v(" "),a("blockquote",[a("p",[t._v("get方法中根本没有使用同步机制，也没有使用unsafe方法，所以"),a("strong",[t._v("读操作是支持并发")]),t._v("操作的。")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("写操作")])]),t._v(" "),a("blockquote",[a("p",[t._v("基本思路跟"),a("strong",[t._v("HashMap")]),t._v("的写操作类似，只不过用到了"),a("strong",[t._v("CAS")]),t._v(" + "),a("strong",[t._v("syn")]),t._v(" 实现加锁，同时还涉及到扩容的操作。"),a("strong",[t._v("JDK8")]),t._v("中锁已经细化到 "),a("strong",[t._v("table[i]")]),t._v(" 了，数组位置不同可并发，位置相同则去帮忙扩容。")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("同步处理主要是通过"),a("strong",[t._v("syn")]),t._v("和"),a("strong",[t._v("unsafe")]),t._v("的硬件级别原子性这两种方式完成")])]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("当我们对某个"),a("strong",[t._v("table[i]**操作时候是用**syn")]),t._v("加锁的。")]),t._v(" "),a("li",[t._v("取数据的时候用的是"),a("strong",[t._v("unsafe")]),t._v("硬件级别指令，直接获取指定内存的最新数据。")])])]),t._v(" "),a("h2",{attrs:{id:"并发基础知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发基础知识"}},[t._v("#")]),t._v(" 并发基础知识")]),t._v(" "),a("p",[t._v("并发编程的出发点："),a("strong",[t._v("充分利用CPU计算资源")]),t._v("，多线程并不是一定比单线程快，要不为什么"),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247488832&idx=1&sn=5999893d7fe773f54f7d097ac1c2074d&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis"),a("OutboundLink")],1),t._v("6.0版本的核心操作指令仍然是单线程呢？对吧！")]),t._v(" "),a("p",[t._v("多线程跟单线程的性能都要具体任务具体分析，"),a("strong",[t._v("talk is cheap, show me the picture")]),t._v("。")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://gitee.com/vicxsl/img/raw/master/img/1629440470550/640.gif",alt:"640"}}),t._v(" "),a("h3",{attrs:{id:"进程跟线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程跟线程"}},[t._v("#")]),t._v(" 进程跟线程")]),t._v(" "),a("p",[a("strong",[t._v("进程")]),t._v("：")]),t._v(" "),a("blockquote",[a("p",[t._v("进程是操作系统调用的最小单位，是系统进行资源分配和调度的独立单位。")])]),t._v(" "),a("p",[a("strong",[t._v("线程")]),t._v("：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("因为进程的创建、销毁、切换产生大量的时间和空间的开销，进程的数量不能太多，而"),a("strong",[t._v("线程是比进程更小")]),t._v("的能独立运行的基本单位，他是进程的一个实体，是"),a("strong",[t._v("CPU调度的最小单位")]),t._v("。线程可以减少程序并发执行时的时间和空间开销，使得操作系统具有更好的并发性。")]),t._v(" "),a("li",[t._v("线程基本不拥有系统资源，只有一些运行时必不可少的资源，比如程序计数器、寄存器和栈，进程则占有堆、栈。线程，Java默认有两个线程  main 跟GC。Java是没有权限开线程的，无法操作硬件，都是调用的  "),a("strong",[t._v("native")]),t._v(" 的  "),a("strong",[t._v("start0")]),t._v(" 方法 由 "),a("strong",[t._v("C++")]),t._v(" 实现")])])]),t._v(" "),a("h3",{attrs:{id:"并行跟并发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并行跟并发"}},[t._v("#")]),t._v(" 并行跟并发")]),t._v(" "),a("p",[t._v("并发：")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("concurrency")]),t._v(" : 多线程操作同一个资源，单核CPU极速的切换运行多个任务")])]),t._v(" "),a("p",[t._v("并行：")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("parallelism")]),t._v(" ：多个CPU同时使用，CPU多核 真正的同时执行")])]),t._v(" "),a("h3",{attrs:{id:"线程几个状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程几个状态"}},[t._v("#")]),t._v(" 线程几个状态")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/vicxsl/img/raw/master/img/1629440729449/image-20210820142529042.png",alt:"image-20210820142529042"}}),t._v(" "),a("p",[t._v("Java中线程的状态分为6种：")]),t._v(" "),a("ol",[a("li",[t._v("初始(New)：")])]),t._v(" "),a("blockquote",[a("p",[t._v("新创建了一个线程对象，但还没有调用start()方法。")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("可运行(Runnable)：")])]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("调用线程的"),a("strong",[t._v("start")]),t._v("()方法，此线程进入就绪状态。就绪状态只是说你"),a("strong",[t._v("有资格运行")]),t._v("，调度程序没有给你CPU资源，你就永远是就绪状态。")]),t._v(" "),a("li",[t._v("当前线程"),a("strong",[t._v("sleep")]),t._v("()方法结束，其他线程"),a("strong",[t._v("join")]),t._v("()结束，等待用户输入完毕，某个线程拿到对象锁，这些线程也将进入就绪状态。")]),t._v(" "),a("li",[t._v("当前线程时间片用完了，调用当前线程的"),a("strong",[t._v("yield")]),t._v("()方法，当前线程进入就绪状态。")]),t._v(" "),a("li",[t._v("锁池里的线程拿到对象锁后，进入"),a("strong",[t._v("就绪状态")]),t._v("。")])])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("运行中(Running)")])]),t._v(" "),a("blockquote",[a("p",[t._v("就绪状态的线程在获得"),a("strong",[t._v("CPU时间片")]),t._v("后变为运行中状态（running）。这也是线程进入运行状态的唯一的一种方式。")])]),t._v(" "),a("ol",[a("li",[t._v("阻塞(Blocked)：")])]),t._v(" "),a("blockquote",[a("p",[t._v("阻塞状态是线程阻塞在进入"),a("strong",[t._v("synchronized")]),t._v("关键字修饰的方法或代码块(获取锁)时的状态。")])]),t._v(" "),a("ol",[a("li",[t._v("等待(Waiting)  跟 超时等待(Timed_Waiting)：")])]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("处于这种状态的线程不会被分配CPU执行时间，它们要等待被显式地唤醒(通知或中断)，否则会处于无限期等待的状态。")]),t._v(" "),a("li",[t._v("处于这种状态的线程不会被分配CPU执行时间，不过无须无限期等待被其他线程显示地唤醒，在达到一定时间后它们会自动唤醒。")])])]),t._v(" "),a("ol",[a("li",[t._v("终止(Terminated)：")])]),t._v(" "),a("blockquote",[a("p",[t._v("当线程正常运行结束或者被异常中断后就会被终止。线程一旦终止了，就不能复生。")])]),t._v(" "),a("p",[t._v("PS：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("调用 "),a("strong",[t._v("obj.wait")]),t._v(" 的线程需要先获取 "),a("strong",[t._v("obj")]),t._v(" 的 "),a("strong",[t._v("monitor")]),t._v("，"),a("strong",[t._v("wait")]),t._v("会释放 "),a("strong",[t._v("obj")]),t._v(" 的 "),a("strong",[t._v("monitor")]),t._v(" 并进入等待态。所以  "),a("strong",[t._v("wait()/notify()")]),t._v(" 都要与 "),a("strong",[t._v("synchronized")]),t._v(" 联用。")]),t._v(" "),a("li",[t._v("其实线程从阻塞/等待状态 到 可运行状态都涉及到"),a("strong",[t._v("同步队列")]),t._v("跟"),a("strong",[t._v("等待队列的")]),t._v("，这点在 "),a("strong",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247489331&idx=1&sn=89e47f0f93ddf3e1089ab11a2b42ce20&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("AQS"),a("OutboundLink")],1)]),t._v(" 有讲。")])])]),t._v(" "),a("h3",{attrs:{id:"阻塞与等待的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阻塞与等待的区别"}},[t._v("#")]),t._v(" 阻塞与等待的区别")]),t._v(" "),a("p",[a("strong",[t._v("阻塞")]),t._v("：")]),t._v(" "),a("blockquote",[a("p",[t._v("当一个线程试图获取对象锁（非JUC库中的锁，即"),a("strong",[t._v("synchronized")]),t._v("），而该锁被其他线程持有，则该线程进入阻塞状态。它的特点是使用简单，由"),a("strong",[t._v("JVM调度器")]),t._v("来决定唤醒自己，而不需要由另一个线程来显式唤醒自己，不响应中断。")])]),t._v(" "),a("p",[a("strong",[t._v("等待")]),t._v("：")]),t._v(" "),a("blockquote",[a("p",[t._v("当一个线程等待另一个线程通知调度器一个条件时，该线程进入等待状态。它的特点是需要等待另一个线程显式地唤醒自己，实现灵活，语义更丰富，可响应中断。例如调用："),a("strong",[t._v("Object.wait()")]),t._v("、**Thread.join()**以及等待 "),a("strong",[t._v("Lock")]),t._v(" 或 "),a("strong",[t._v("Condition")]),t._v("。")])]),t._v(" "),a("p",[t._v("虽然 "),a("strong",[t._v("synchronized")]),t._v(" 和 "),a("strong",[t._v("JUC")]),t._v(" 里的 "),a("strong",[t._v("Lock")]),t._v(" 都实现锁的功能，但线程进入的状态是不一样的。"),a("strong",[t._v("synchronized")]),t._v(" 会让线程进入"),a("strong",[t._v("阻塞态")]),t._v("，而 "),a("strong",[t._v("JUC")]),t._v(" 里的 "),a("strong",[t._v("Lock")]),t._v("是用"),a("strong",[t._v("park()/unpark()")]),t._v(" 来实现"),a("strong",[t._v("阻塞/唤醒")]),t._v(" 的，会让线程进入"),a("strong",[t._v("等待状态")]),t._v("。虽然等锁时进入的状态不一样，但被唤醒后又都进入"),a("strong",[t._v("Runnable")]),t._v("状态，从行为效果来看又是一样的。")]),t._v(" "),a("h3",{attrs:{id:"yield-跟-sleep-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yield-跟-sleep-区别"}},[t._v("#")]),t._v(" yield 跟 sleep 区别")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("yield")]),t._v(" 跟 "),a("strong",[t._v("sleep")]),t._v(" 都能暂停当前线程，都"),a("strong",[t._v("不会释放锁资源")]),t._v("，"),a("strong",[t._v("sleep")]),t._v(" 可以指定具体休眠的时间，而 "),a("strong",[t._v("yield")]),t._v(" 则依赖 "),a("strong",[t._v("CPU")]),t._v(" 的时间片划分。")]),t._v(" "),a("li",[a("strong",[t._v("sleep")]),t._v("方法给其他线程运行机会时不考虑线程的优先级，因此会给低优先级的线程以运行的机会。"),a("strong",[t._v("yield")]),t._v("方法只会给相同优先级或更高优先级的线程以运行的机会。")]),t._v(" "),a("li",[t._v("调用 "),a("strong",[t._v("sleep")]),t._v(" 方法使线程进入"),a("strong",[t._v("等待状态")]),t._v("，等待休眠时间达到，而调用我们的 "),a("strong",[t._v("yield")]),t._v("方法，线程会进入"),a("strong",[t._v("就绪状态")]),t._v("，也就是"),a("strong",[t._v("sleep")]),t._v("需要等待设置的时间后才会进行"),a("strong",[t._v("就绪状态")]),t._v("，而"),a("strong",[t._v("yield")]),t._v("会立即进入"),a("strong",[t._v("就绪状态")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("sleep")]),t._v("方法声明会抛出 "),a("strong",[t._v("InterruptedException")]),t._v("，而 "),a("strong",[t._v("yield")]),t._v(" 方法没有声明任何异常")]),t._v(" "),a("li",[a("strong",[t._v("yield")]),t._v(" 不能被中断，而 "),a("strong",[t._v("sleep")]),t._v(" 则可以接受中断。")]),t._v(" "),a("li",[a("strong",[t._v("sleep")]),t._v("方法比"),a("strong",[t._v("yield")]),t._v("方法具有更好的移植性(跟操作系统CPU调度相关)")])]),t._v(" "),a("h3",{attrs:{id:"wait-跟-sleep-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wait-跟-sleep-区别"}},[t._v("#")]),t._v(" wait 跟 sleep 区别")]),t._v(" "),a("ol",[a("li",[t._v("来源不同")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("wait")]),t._v(" 来自"),a("strong",[t._v("Object")]),t._v("，"),a("strong",[t._v("sleep")]),t._v(" 来自 "),a("strong",[t._v("Thread")])])]),t._v(" "),a("ol",[a("li",[t._v("是否释放锁")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("wait")]),t._v(" 释放锁，"),a("strong",[t._v("sleep")]),t._v(" 不释放")])]),t._v(" "),a("ol",[a("li",[t._v("使用范围")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("wait")]),t._v(" 必须在同步代码块中，"),a("strong",[t._v("sleep")]),t._v(" 可以任意使用")])]),t._v(" "),a("ol",[a("li",[t._v("捕捉异常")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("wait")]),t._v(" 不需要捕获异常，"),a("strong",[t._v("sleep")]),t._v(" 需捕获异常")])]),t._v(" "),a("h3",{attrs:{id:"多线程实现方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多线程实现方式"}},[t._v("#")]),t._v(" 多线程实现方式")]),t._v(" "),a("ol",[a("li",[t._v("继承 "),a("strong",[t._v("Thread")]),t._v("，实现"),a("strong",[t._v("run")]),t._v("方法")]),t._v(" "),a("li",[t._v("实现 "),a("strong",[t._v("Runnable")]),t._v("接口中的"),a("strong",[t._v("run")]),t._v("方法，然后用"),a("strong",[t._v("Thread")]),t._v("包装下。"),a("strong",[t._v("Thread")]),t._v(" 是线程对象，"),a("strong",[t._v("Runnable")]),t._v(" 是任务，线程启动的时候一定是对象。")]),t._v(" "),a("li",[t._v("实现 "),a("strong",[t._v("Callable")]),t._v("接口，"),a("strong",[t._v("FutureTask")]),t._v(" 包装实现接口，"),a("strong",[t._v("Thread")]),t._v(" 包装 "),a("strong",[t._v("FutureTask")]),t._v("。"),a("strong",[t._v("Callable")]),t._v(" 与 "),a("strong",[t._v("Runnable")]),t._v(" 的区别在于"),a("strong",[t._v("Callable")]),t._v("的"),a("strong",[t._v("call")]),t._v("方法有返回值，可以抛出异常，"),a("strong",[t._v("Callable")]),t._v("有缓存。")]),t._v(" "),a("li",[t._v("通过"),a("strong",[t._v("线程池")]),t._v("调用实现。")]),t._v(" "),a("li",[t._v("通过"),a("strong",[t._v("Spring")]),t._v("的注解 "),a("strong",[t._v("@Async")]),t._v(" 实现。")])]),t._v(" "),a("h3",{attrs:{id:"死锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#死锁"}},[t._v("#")]),t._v(" 死锁")]),t._v(" "),a("p",[t._v("死锁是指两个或两个以上的线程互相持有对方所需要的资源，由于某些锁的特性，比如syn使用下，一个线程持有一个资源，或者说获得一个锁，在该线程释放这个锁之前，其它线程是获取不到这个锁的，而且会一直死等下去，因此这便造成了死锁。")]),t._v(" "),a("blockquote",[a("p",[t._v("面试官：你给我解释下死锁是什么，解释好了我就录用你。")]),t._v(" "),a("p",[t._v("应聘者：先发Offer，发了Offer我给你解释什么是死锁。")])]),t._v(" "),a("h4",{attrs:{id:"产生条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#产生条件"}},[t._v("#")]),t._v(" "),a("strong",[t._v("产生条件")]),t._v("：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[a("strong",[t._v("互斥条件")]),t._v("：一个资源，或者说一个锁只能被一个线程所占用，当一个线程首先获取到这个锁之后，在该线程释放这个锁之前，其它线程均是无法获取到这个锁的。")]),t._v(" "),a("li",[a("strong",[t._v("占有且等待")]),t._v("：一个线程已经获取到一个锁，再获取另一个锁的过程中，即使获取不到也不会释放已经获得的锁。")]),t._v(" "),a("li",[a("strong",[t._v("不可剥夺条件")]),t._v("：任何一个线程都无法强制获取别的线程已经占有的锁")]),t._v(" "),a("li",[a("strong",[t._v("循环等待条件")]),t._v("：线程A拿着线程B的锁，线程B拿着线程A的锁。。")])])]),t._v(" "),a("h4",{attrs:{id:"检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检查"}},[t._v("#")]),t._v(" "),a("strong",[t._v("检查")]),t._v("：")]),t._v(" "),a("blockquote",[a("p",[t._v("1、jps -l 定位进程号")]),t._v(" "),a("p",[t._v("2、jstack 进程号找到死锁问题")])]),t._v(" "),a("h3",{attrs:{id:"避免"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#避免"}},[t._v("#")]),t._v(" "),a("strong",[t._v("避免")]),t._v("：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[a("strong",[t._v("加锁顺序")]),t._v("：线程按照相同的顺序加锁。")]),t._v(" "),a("li",[a("strong",[t._v("限时加锁")]),t._v("：线程获取锁的过程中限制一定的时间，如果给定时间内获取不到，就算了，这需要用到Lock的一些API。")])])]),t._v(" "),a("h2",{attrs:{id:"jmm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jmm"}},[t._v("#")]),t._v(" JMM")]),t._v(" "),a("h3",{attrs:{id:"jmm由来"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jmm由来"}},[t._v("#")]),t._v(" JMM由来")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/vicxsl/img/raw/master/img/1629442458148/image-20210820145417740.png",alt:"image-20210820145417740"}})]),t._v(" "),a("p",[t._v("随着"),a("strong",[t._v("CPU")]),t._v("、"),a("strong",[t._v("内存")]),t._v("、"),a("strong",[t._v("磁盘")]),t._v("的高速发展，它们的访问速度差别很大。为了提速就引入了L1、L2、L3三级缓存。以后程序运行获取数据就是如下的步骤了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/vicxsl/img/raw/master/img/1629442492085/image-20210820145451716.png",alt:"image-20210820145451716"}})]),t._v(" "),a("p",[t._v("这样虽然提速了但是会导致"),a("code",[t._v("缓存一致性问题")]),t._v("跟"),a("code",[t._v("内存可见性问题")]),t._v("。同时编译器跟CPU为了加速也引入了指令重排。指令重排的大致意思就是你写的代码运行运算结果会按照你看到的逻辑思维去运行，但是在JVM内部系统是智能化的会进行加速排序的。")]),t._v(" "),a("p",[t._v("1、编译器优化的重排序：编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。")]),t._v(" "),a("p",[t._v("2、指令级并行的重排序：现代处理器采用了指令级并行技术在不影响数据依赖性前提下重排。")]),t._v(" "),a("p",[t._v("3、内存系统的重排序：处理器使用缓存和读/写缓冲区 进程重排。")]),t._v(" "),a("p",[t._v("指令重排这种机制会导致"),a("code",[t._v("有序性问题")]),t._v("，而在并发编程时经常会涉及到线程之间的通信跟同步问题，一般说是"),a("code",[t._v("可见性")]),t._v("、"),a("code",[t._v("原子性")]),t._v("、"),a("code",[t._v("有序性")]),t._v("。这三个问题对应的底层就是 "),a("strong",[t._v("缓存一致性")]),t._v("、"),a("strong",[t._v("内存可见性")]),t._v("、"),a("strong",[t._v("有序性")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("原子性")]),t._v("：原子性就是指该操作是不可再分的。不论是多核还是单核，具有原子性的量，同一时刻只能有一个线程来对它进行操作。在整个操作过程中不会被线程调度器中断的操作，都可认为是原子性。比如 a = 1。")]),t._v(" "),a("p",[a("strong",[t._v("可见性")]),t._v("：指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。Java保证可见性可以认为通过"),a("strong",[t._v("volatile")]),t._v("、"),a("strong",[t._v("synchronized")]),t._v("、"),a("strong",[t._v("final")]),t._v("来实现。")]),t._v(" "),a("p",[a("strong",[t._v("有序性")]),t._v("：程序执行的顺序按照代码的先后顺序执行，Java通过"),a("strong",[t._v("volatile")]),t._v("、"),a("strong",[t._v("synchronized")]),t._v("来保证。")])]),t._v(" "),a("p",[t._v("为了保证共享内存的正确性(可见性、有序性、原子性)，内存模型定义了共享内存模式下"),a("strong",[t._v("多线程程序读写操作行为的规范")]),t._v("，既"),a("strong",[t._v("JMM")]),t._v("模型，注意"),a("strong",[t._v("JMM")]),t._v("只是一个"),a("strong",[t._v("约定概念")]),t._v("，是用来保证效果一致的"),a("strong",[t._v("机制")]),t._v("跟"),a("strong",[t._v("规范")]),t._v("。它作用于"),a("strong",[t._v("工作内存和主存之间数据同步过程")]),t._v("，规定了如何做数据同步以及什么时候做数据同步。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/vicxsl/img/raw/master/img/1629442825673/image-20210820150025295.png",alt:"image-20210820150025295"}})]),t._v(" "),a("p",[t._v("在JMM中，有两条规定：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("线程对共享变量的所有操作都必须在自己的工作内存中进行，不能直接从主内存中读写。")]),t._v(" "),a("li",[t._v("不同线程之间无法访问其他线程工作内存中的变量，线程间变量值的传递需要通过主内存来完成。")])])]),t._v(" "),a("p",[t._v("共享变量要实现可见性，必须经过如下两个步骤：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("把本地内存1中更新过的共享变量刷新到主内存中。")]),t._v(" "),a("li",[t._v("把主内存中最新的共享变量的值更新到本地内存2中。")])])]),t._v(" "),a("p",[t._v("同时人们提出了"),a("code",[t._v("内存屏障")]),t._v("、"),a("code",[t._v("happen-before")]),t._v("、"),a("code",[t._v("af-if-serial")]),t._v("这三种概念来保证系统的"),a("code",[t._v("可见性")]),t._v("、"),a("code",[t._v("原子性")]),t._v("、"),a("code",[t._v("有序性")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"内存屏障"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存屏障"}},[t._v("#")]),t._v(" 内存屏障")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247488184&idx=1&sn=20f001915d5504da77d753fe7d4a38c0&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("内存屏障"),a("OutboundLink")],1),t._v(" (Memory Barrier) 是一种CPU指令，用于控制特定条件下的"),a("strong",[t._v("重排序")]),t._v("和"),a("strong",[t._v("内存可见性")]),t._v("问题。Java编译器也会根据内存屏障的规则禁止重排序。Java编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序，从而让程序按我们预想的流程去执行。具有如下功能：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("保证特定操作的执行顺序。")]),t._v(" "),a("li",[t._v("影响某些数据（或则是某条指令的执行结果）的内存可见性。")])])]),t._v(" "),a("p",[t._v("在 "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247485656&idx=1&sn=03c2eedc1f749e719230cfa87952c51c&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("volatile"),a("OutboundLink")],1),t._v(" 中就用到了内存屏障，"),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247485656&idx=1&sn=03c2eedc1f749e719230cfa87952c51c&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("volatile"),a("OutboundLink")],1),t._v("部分已详细讲述。")]),t._v(" "),a("h3",{attrs:{id:"happen-before"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#happen-before"}},[t._v("#")]),t._v(" happen-before")]),t._v(" "),a("p",[t._v("因为有"),a("code",[t._v("指令重排")]),t._v("的存在会导致难以理解CPU内部运行规则，JDK用 "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247488184&idx=1&sn=20f001915d5504da77d753fe7d4a38c0&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("happens-before"),a("OutboundLink")],1),t._v(" 的概念来阐述操作之间的内存可见性。在"),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247488184&idx=1&sn=20f001915d5504da77d753fe7d4a38c0&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("JMM"),a("OutboundLink")],1),t._v(" 中如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须要存在"),a("code",[t._v("happens-before")]),t._v("关系 。其中CPU的"),a("code",[t._v("happens-before")]),t._v("无需任何同步手段就可以保证的。")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作。")]),t._v(" "),a("li",[t._v("监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。")]),t._v(" "),a("li",[t._v("volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。")]),t._v(" "),a("li",[t._v("传递性：如果A happens-before B，且B happens-before C，那么A happens-before C。")]),t._v(" "),a("li",[t._v("start()规则：如果线程A执行操作ThreadB.start()（启动线程B），那么A线程的ThreadB.start()操作happens-before于线程B中的任意操作。")]),t._v(" "),a("li",[t._v("join()规则：如果线程A执行操作ThreadB.join()并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回。")]),t._v(" "),a("li",[t._v("线程中断规则:对线程interrupt方法的调用happens-before于被中断线程的代码检测到中断事件的发生。")])])]),t._v(" "),a("h3",{attrs:{id:"af-if-serial"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#af-if-serial"}},[t._v("#")]),t._v(" af-if-serial")]),t._v(" "),a("p",[a("strong",[t._v("af-if-serial")]),t._v(" 的含义是不管怎么重排序(编译器和处理器为了提高并行度)，单线程环境下程序的执行结果不能被改变且必须正确。该语义使单线程环境下程序员无需担心重排序会干扰他们，也无需担心内存可见性问题。")]),t._v(" "),a("h2",{attrs:{id:"volatile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volatile"}},[t._v("#")]),t._v(" volatile")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247485656&idx=1&sn=03c2eedc1f749e719230cfa87952c51c&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("volatile"),a("OutboundLink")],1),t._v(" 关键字的引入可以保证变量的"),a("strong",[t._v("可见性")]),t._v("，但是无法保证变量的"),a("strong",[t._v("原子性")]),t._v("，比如 "),a("strong",[t._v("a++")]),t._v(" 这样的是无法保证的。这里其实涉及到"),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247488184&idx=1&sn=20f001915d5504da77d753fe7d4a38c0&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("JMM"),a("OutboundLink")],1),t._v(" 的知识点，"),a("strong",[t._v("Java")]),t._v("多线程交互是通过"),a("strong",[t._v("共享内存")]),t._v("的方式实现的。当我们读写volatile变量时具有如下规则：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("当写一个"),a("strong",[t._v("volatile")]),t._v("变量时，"),a("strong",[t._v("JMM")]),t._v("会把该线程对应的本地中的共享变量值"),a("strong",[t._v("刷新到主内存")]),t._v("。")]),t._v(" "),a("li",[t._v("当读一个"),a("strong",[t._v("volatile")]),t._v("变量时，"),a("strong",[t._v("JMM")]),t._v("会把该线程对应的本地内存置为无效。线程接下来将"),a("strong",[t._v("从主内存中读取共享变量")]),t._v("。")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/vicxsl/img/raw/master/img/1629443097272/image-20210820150456868.png",alt:"image-20210820150456868"}})]),t._v(" "),a("p",[a("strong",[t._v("volatile")]),t._v("就会用到上面说到的内存屏障，目前有四种内存屏障：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("StoreStore屏障，保证普通写不和volatile写发生重排序")]),t._v(" "),a("li",[t._v("StoreLoad屏障，保证volatile写与后面可能的volatile读写不发生重排序")]),t._v(" "),a("li",[t._v("LoadLoad屏障，禁止volatile读与后面的普通读重排序")]),t._v(" "),a("li",[t._v("LoadStore屏障，禁止volatile读和后面的普通写重排序")])])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247485656&idx=1&sn=03c2eedc1f749e719230cfa87952c51c&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("volatile"),a("OutboundLink")],1),t._v("原理：用"),a("strong",[t._v("volatile")]),t._v("变量修饰的共享变量进行写操作的时候会使用"),a("strong",[t._v("CPU")]),t._v("提供的"),a("strong",[t._v("Lock")]),t._v("前缀指令，在"),a("strong",[t._v("CPU")]),t._v("级别的功能如下：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("将当前处理器缓存行的数据写回到 系统内存。")]),t._v(" "),a("li",[t._v("这个写回内存的操作会告知在其他CPU你们拿到的变量是无效的下一次使用时候要重新共享内存拿。")])])]),t._v(" "),a("h2",{attrs:{id:"单例模式-dcl-volatile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单例模式-dcl-volatile"}},[t._v("#")]),t._v(" 单例模式 DCL + volatile")]),t._v(" "),a("h3",{attrs:{id:"标准单例模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标准单例模式"}},[t._v("#")]),t._v(" 标准单例模式")]),t._v(" "),a("p",[a("strong",[t._v("高频考点单例模式")]),t._v("：就是将类的构造函数进行"),a("strong",[t._v("private")]),t._v("化，然后只留出一个静态的 "),a("strong",[t._v("Instance")]),t._v(" 函数供外部调用者调用。单例模式一般标准写法是 "),a("strong",[t._v("DCL")]),t._v(" + "),a("strong",[t._v("volatile")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingleDcl")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingleDcl")]),t._v(" singleDcl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//保证可见性")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingleDcl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingleDcl")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 放置进入加锁代码，先判断下是否已经初始化好了")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("singleDcl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类锁 可能会出现 AB线程都在这卡着，A获得锁，B等待获得锁。")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingleDcl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("singleDcl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果A线程初始化好了，然后通过vloatile 将变量复杂给住线程。")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果此时没有singleDel === null,判断 B进程 进来后还会再次执行 new 语句")]),t._v("\n     singleDcl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingleDcl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" singleDcl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])]),a("h3",{attrs:{id:"为什么用volatile修饰"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么用volatile修饰"}},[t._v("#")]),t._v(" 为什么用Volatile修饰")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/vicxsl/img/raw/master/img/1629443253930/image-20210820150733555.png",alt:"image-20210820150733555"}})]),t._v(" "),a("p",[t._v("不用"),a("strong",[t._v("Volatile")]),t._v("则代码运行时可能存在指令重排，会导致线程一在运行时执行顺序是 1--\x3e2--\x3e 4 就赋值给instance变量了，然后接下来再执行构造方法初始化。"),a("strong",[t._v("问题是")]),t._v("如果构造方法初始化执行"),a("strong",[t._v("没完成前")]),t._v(" 线程二进入发现instance != null，直接给线程二个半成品，加入volatile后底层会使用内存屏障强制按照你以为的执行。")]),t._v(" "),a("p",[t._v("单例模式几乎是面试必考点,，一般有如下特性：")]),t._v(" "),a("p",[a("strong",[t._v("懒汉式")]),t._v("：在需要用到对象时才实例化对象，正确的实现方式是 Double Check + Lock + volatile，解决了并发安全和性能低下问题，对内存要求非常高，那么使用懒汉式写法。")]),t._v(" "),a("p",[a("strong",[t._v("饿汉式")]),t._v("：在类加载时已经创建好该单例对象，在获取单例对象时直接返回对象即可，对内存要求不高使用饿汉式写法，因为简单不易出错，且没有任何并发安全和性能问题。")]),t._v(" "),a("p",[a("strong",[t._v("枚举式")]),t._v("：Effective Java 这本书也列举了使用枚举，其代码精简，没有线程安全问题，且 "),a("strong",[t._v("Enum")]),t._v(" 类内部防止反射和反序列化时破坏单例。")]),t._v(" "),a("h2",{attrs:{id:"线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[t._v("#")]),t._v(" 线程池")]),t._v(" "),a("h3",{attrs:{id:"五分钟了解线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五分钟了解线程池"}},[t._v("#")]),t._v(" 五分钟了解线程池")]),t._v(" "),a("p",[a("strong",[t._v("老王")]),t._v("是个深耕在帝都的一线码农，辛苦一年挣了点钱，想把钱存储到银行卡里，拿钱去银行办理遇到了如下的遭遇")]),t._v(" "),a("ol",[a("li",[t._v("老王银行门口取号后发现有柜台营业ing  但是没人办理业务就"),a("code",[t._v("直接办理")]),t._v("了。")]),t._v(" "),a("li",[t._v("老王取号后发现柜台上都有人在办理，等待席有空地，去"),a("code",[t._v("坐着等")]),t._v("办理去了。")]),t._v(" "),a("li",[t._v("老王取号后发现柜台都有人办理，等待席也人坐满了，这个时候银行经理看到老王是老实人本着关爱老实人的态度，新开一个"),a("strong",[t._v("临时")]),t._v("窗口给他办理了。")]),t._v(" "),a("li",[t._v("老王取号后发现柜台都满了，等待座位席也满了，"),a("strong",[t._v("临时")]),t._v("窗口也人满了。这个时候银行经理给出了若干"),a("code",[t._v("解决策略")]),t._v("。")])]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("直接告知人太多不给你办理了。")]),t._v(" "),a("li",[t._v("采用冷暴力模式，也不给不办理也不让他走。")]),t._v(" "),a("li",[t._v("经理让老王取尝试跟座位席中最前面的人聊一聊看是否可以加塞，可以就办理，不可以还是被踢走。")]),t._v(" "),a("li",[t._v("经理直接跟老王说谁让你来的你找谁去我这办理不了。")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/vicxsl/img/raw/master/img/1629443373985/image-20210820150933545.png",alt:"image-20210820150933545"}})]),t._v(" "),a("p",[t._v("上面的这个流程几乎就跟JDK线程池的大致流程类似，其中7大参数：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("营业中的3个窗口对应核心线程池数："),a("strong",[t._v("corePoolSize")])]),t._v(" "),a("li",[t._v("银行总的营业窗口数对应："),a("strong",[t._v("maximumPoolSize")])]),t._v(" "),a("li",[t._v("打开的临时窗口在多少时间内无人办理则关闭对应："),a("strong",[t._v("keepAliveTime")])]),t._v(" "),a("li",[t._v("临时窗口存货时间单位："),a("strong",[t._v("TimeUnit")])]),t._v(" "),a("li",[t._v("银行里的等待座椅就是等待队列："),a("strong",[t._v("BlockingQueue")])]),t._v(" "),a("li",[a("strong",[t._v("threadFactory")]),t._v(" 该参数在JDK中是 线程工厂，用来创建线程对象，一般不会动。")]),t._v(" "),a("li",[t._v("无法办理的时候银行给出的解决方法对应："),a("strong",[t._v("RejectedExecutionHandler")])])])]),t._v(" "),a("p",[t._v("当线程池的任务缓存队列"),a("strong",[t._v("已满")]),t._v("并且线程池中的线程数目达到"),a("strong",[t._v("maximumPoolSize")]),t._v("，如果还有任务到来就会采取任务拒绝策略，一般有"),a("strong",[t._v("四大拒绝策略")]),t._v("：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("ThreadPoolExecutor.AbortPolicy ：丢弃任务，并抛出 "),a("strong",[t._v("RejectedExecutionException")]),t._v(" 异常。")]),t._v(" "),a("li",[t._v("ThreadPoolExecutor.CallerRunsPolicy：该任务被线程池拒绝，由调用 "),a("strong",[t._v("execute")]),t._v("方法的线程执行该任务。")]),t._v(" "),a("li",[t._v("ThreadPoolExecutor.DiscardOldestPolicy ：抛弃队列最前面的任务，然后重新尝试执行任务。")]),t._v(" "),a("li",[t._v("ThreadPoolExecutor.DiscardPolicy：丢弃任务，也不抛出异常。")])])]),t._v(" "),a("h3",{attrs:{id:"正确创建方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正确创建方式"}},[t._v("#")]),t._v(" 正确创建方式")]),t._v(" "),a("p",[t._v("使用"),a("strong",[t._v("Executors")]),t._v("创建线程池可能会导致"),a("strong",[t._v("OOM")]),t._v("。原因在于线程池中的"),a("strong",[t._v("BlockingQueue")]),t._v("主要有两种实现，分别是"),a("strong",[t._v("ArrayBlockingQueue")]),t._v(" 和 "),a("strong",[t._v("LinkedBlockingQueue")]),t._v("。")]),t._v(" "),a("blockquote",[a("ol",[a("li",[a("strong",[t._v("ArrayBlockingQueue")]),t._v(" 是一个用数组实现的有界阻塞队列，必须设置容量。")]),t._v(" "),a("li",[a("strong",[t._v("LinkedBlockingQueue")]),t._v(" 是一个用链表实现的有界阻塞队列，容量可以选择进行设置，不设置的话，将是一个无边界的阻塞队列，最大长度为Integer.MAX_VALUE，极易容易导致线程池OOM。")])])]),t._v(" "),a("p",[t._v("正确创建线程池的方式就是自己直接调用"),a("strong",[t._v("ThreadPoolExecutor")]),t._v("的构造函数来自己创建线程池。在创建的同时，给"),a("strong",[t._v("BlockQueue")]),t._v("指定容量就可以了。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" executor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("60L")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SECONDS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayBlockingQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h3",{attrs:{id:"常见线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见线程池"}},[t._v("#")]),t._v(" 常见线程池")]),t._v(" "),a("p",[t._v("罗列几种常见的"),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzU1NTkwODE4Mw==&mid=2247492339&idx=1&sn=3667ed5b8e437b40024f5c3ba9f16789&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("线程池创建"),a("OutboundLink")],1),t._v("方式。")]),t._v(" "),a("ol",[a("li",[t._v("Executors.newFixedThreadPool")])]),t._v(" "),a("blockquote",[a("p",[t._v("定长的线程池，有核心线程，核心线程的即为最大的线程数量，没有非核心线程。使用的无界的等待队列是LinkedBlockingQueue。使用时候小心堵满等待队列。")])]),t._v(" "),a("ol",[a("li",[t._v("Executors.newSingleThreadExecutor")])]),t._v(" "),a("blockquote",[a("p",[t._v("创建单个线程数的线程池，它可以保证先进先出的执行顺序")])]),t._v(" "),a("ol",[a("li",[t._v("Executors.newCachedThreadPool")])]),t._v(" "),a("blockquote",[a("p",[t._v("创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。")])]),t._v(" "),a("ol",[a("li",[t._v("Executors.newScheduledThreadPool")])]),t._v(" "),a("blockquote",[a("p",[t._v("创建一个定长的线程池，而且支持定时的以及周期性的任务执行，支持定时及周期性任务执行")])]),t._v(" "),a("ol",[a("li",[t._v("ThreadPoolExecutor")])]),t._v(" "),a("blockquote",[a("p",[t._v("最原始跟常见的创建线程池的方式，它包含了 7 个参数、4种拒绝策略 可用。")])]),t._v(" "),a("h3",{attrs:{id:"线程池核心点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池核心点"}},[t._v("#")]),t._v(" 线程池核心点")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/vicxsl/img/raw/master/img/1629443564022/image-20210820151243625.png",alt:"image-20210820151243625"}})]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247485573&idx=1&sn=d1c7a57cf12a531cdcfb9522be7f1175&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("线程池"),a("OutboundLink")],1),t._v(" 在工作中常用，面试也是必考点。关于线程池的细节跟使用在以前举例过一个 "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247485573&idx=1&sn=d1c7a57cf12a531cdcfb9522be7f1175&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("银行排队"),a("OutboundLink")],1),t._v(" 办业务的例子了。线程池一般主要也无非就是下面几个考点了：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("为什么用线程池。")]),t._v(" "),a("li",[t._v("线程池的作用。")]),t._v(" "),a("li",[a("strong",[t._v("7大重要参数")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("4大拒绝策略")]),t._v("。")]),t._v(" "),a("li",[t._v("常见线程池任务队列，如何理解有界跟无界。")]),t._v(" "),a("li",[t._v("常用的线程池模版。")]),t._v(" "),a("li",[t._v("如何分配线程池个数，"),a("strong",[t._v("IO密集型")]),t._v(" 还是 "),a("strong",[t._v("CPU密集型")]),t._v("。")]),t._v(" "),a("li",[t._v("设定一个线程池优先级队列，"),a("strong",[t._v("Runable")]),t._v(" 类要实现可对比功能，任务队列使用优先级队列。")])])]),t._v(" "),a("h2",{attrs:{id:"threadlocal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal"}},[t._v("#")]),t._v(" ThreadLocal")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247485381&idx=1&sn=cdcb9c6744e287cb37ac16102471ebc6&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("ThreadLocal"),a("OutboundLink")],1),t._v(" 可以简单理解为线程本地变量，相比于  "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247488320&idx=1&sn=6fd5cddf2a0ff68fe00ccc834e90521b&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("synchronized"),a("OutboundLink")],1),t._v(" 是用空间来换时间的思想。他会在每个线程都创建一个副本，在线程之间通过访问内部副本变量的形式做到了线程之间互相隔离。这里用到了 "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247489183&idx=1&sn=02ab3551c473bd2c8429862e3689a94b&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("弱引用"),a("OutboundLink")],1),t._v(" 知识点：")]),t._v(" "),a("blockquote",[a("p",[t._v("如果一个对象只具有弱引用，那么GC回收器在扫描到该对象时，"),a("strong",[t._v("无论内存充足与否，都会回收该对象的内存")]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"核心点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心点"}},[t._v("#")]),t._v(" 核心点")]),t._v(" "),a("p",[t._v("每个"),a("strong",[t._v("Thread")]),t._v("内部都维护一个"),a("strong",[t._v("ThreadLocalMap")]),t._v("字典数据结构，字典的"),a("strong",[t._v("Key")]),t._v("值是"),a("strong",[t._v("ThreadLocal")]),t._v("，那么当某个"),a("strong",[t._v("ThreadLocal")]),t._v("对象不再使用(没有其它地方再引用)时，每个已经关联了此"),a("strong",[t._v("ThreadLocal")]),t._v("的线程怎么在其内部的"),a("strong",[t._v("ThreadLocalMap")]),t._v("里做清除此资源呢？"),a("strong",[t._v("JDK")]),t._v("中的"),a("strong",[t._v("ThreadLocalMap")]),t._v("没有继承"),a("strong",[t._v("java.util.Map")]),t._v("类，而是自己实现了一套专门用来"),a("strong",[t._v("定时清理无效资源的字典结构")]),t._v("。其内部存储实体结构"),a("strong",[t._v("Entry<ThreadLocal, T>*"),a("em",[t._v("继承自*"),a("em",[t._v("java.lan.ref.WeakReference")])]),t._v("，这样当")]),t._v("ThreadLocal"),a("strong",[t._v("不再被引用时，因为弱引用机制原因，当")]),t._v("jvm"),a("strong",[t._v("发现内存不足时，会自动回收弱引用指向的实例内存，即其线程内部的")]),t._v("ThreadLocalMap"),a("strong",[t._v("会释放其对")]),t._v("ThreadLocal"),a("strong",[t._v("的引用从而让")]),t._v("jvm"),a("strong",[t._v("回收")]),t._v("ThreadLocal"),a("strong",[t._v("对象。这里是重点强调下，回收的是")]),t._v("Key** 也就是"),a("strong",[t._v("ThreadLocal")]),t._v("对象，而非整个"),a("strong",[t._v("Entry")]),t._v("，所以线程变量中的值"),a("strong",[t._v("T")]),t._v("对象还是在内存中存在的，所以内存泄漏的问题还没有完全解决。")]),t._v(" "),a("p",[t._v("接着分析底层代码会发现在调用ThreadLocal.get() 或者 ThreadLocal.set() 都会 "),a("strong",[t._v("定期回收无效的Entry")]),t._v(" 操作。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/vicxsl/img/raw/master/img/1629443661927/image-20210820151421550.png",alt:"image-20210820151421550"}})]),t._v(" "),a("h2",{attrs:{id:"cas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cas"}},[t._v("#")]),t._v(" CAS")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247488426&idx=1&sn=705cace6ce7fbc2d6f141e8b03623fff&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("Compare And Swap"),a("OutboundLink")],1),t._v("：比较并交换，主要是通过"),a("strong",[t._v("处理器的指令")]),t._v("来保证操作的"),a("code",[t._v("原子性")]),t._v("，它包含三个操作数：")]),t._v(" "),a("blockquote",[a("p",[t._v("V：变量内存地址")]),t._v(" "),a("p",[t._v("A：旧的预期值")]),t._v(" "),a("p",[t._v("B：准备设置的新值")])]),t._v(" "),a("p",[t._v("当执行"),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247488426&idx=1&sn=705cace6ce7fbc2d6f141e8b03623fff&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("CAS"),a("OutboundLink")],1),t._v("指令时，只有当 V 对应的值等于 A 时才会用 B 去更新V的值，否则就不会执行更新操作。"),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247488426&idx=1&sn=705cace6ce7fbc2d6f141e8b03623fff&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("CAS"),a("OutboundLink")],1),t._v("可能会带来"),a("strong",[t._v("ABA问题")]),t._v("、"),a("strong",[t._v("循环开销过大问题")]),t._v("、一个共享变量原子性操作的"),a("strong",[t._v("局限性")]),t._v("。如何解决以前写过，在此不再重复。")]),t._v(" "),a("h1",{attrs:{id:"synchronized"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#synchronized"}},[t._v("#")]),t._v(" Synchronized")]),t._v(" "),a("h3",{attrs:{id:"synchronized-讲解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-讲解"}},[t._v("#")]),t._v(" Synchronized 讲解")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247488320&idx=1&sn=6fd5cddf2a0ff68fe00ccc834e90521b&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("Synchronized"),a("OutboundLink")],1),t._v(" 是 JDK自带的线程安全关键字，该关键字可以修饰"),a("strong",[t._v("实例方法")]),t._v("、"),a("strong",[t._v("静态方法")]),t._v("、"),a("strong",[t._v("代码块")]),t._v("三部分。该关键字可以保证"),a("strong",[t._v("互斥性")]),t._v("、"),a("strong",[t._v("可见性")]),t._v("、"),a("strong",[t._v("有序性")]),t._v("(不解决重排)但保证"),a("strong",[t._v("有序性")]),t._v("。")]),t._v(" "),a("p",[a("strong",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247488320&idx=1&sn=6fd5cddf2a0ff68fe00ccc834e90521b&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("Syn"),a("OutboundLink")],1),t._v("的底层其实是C++代码写的，JDK6前是重量级锁，调用的时候涉及到用户态跟内核态的切换，挺耗时的。JDK6之前 Doug Lea写出了JUC包，可以方便的让用于在用户态实现锁的使用，Syn的开发者被激发了斗志所以在JDK6后对Syn进行了各种性能升级。")])]),t._v(" "),a("h3",{attrs:{id:"synchronized-底层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-底层"}},[t._v("#")]),t._v(" Synchronized 底层")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://gitee.com/vicxsl/img/raw/master/img/1629443805941/image-20210820151645540.png",alt:"image-20210820151645540"}}),t._v(" "),a("p",[t._v("Syn里涉及到了 "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247488320&idx=1&sn=6fd5cddf2a0ff68fe00ccc834e90521b&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("对象头"),a("OutboundLink")],1),t._v(" 包含对象头、填充数据、实例变量。这里可以看一个美团面试题：")]),t._v(" "),a("p",[t._v("问题一：new Object()占多少字节")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("markword 8字节 + classpointer 4字节(默认用calssPointer压缩) + padding 4字节  = "),a("strong",[t._v("16")]),t._v("字节")]),t._v(" "),a("li",[t._v("如果没开启classpointer压缩：markword 8字节 + classpointer 8字节 = "),a("strong",[t._v("16")]),t._v("字节")])])]),t._v(" "),a("p",[t._v('问题二：User (int id,String name) User u = new User(1,"李四")')]),t._v(" "),a("blockquote",[a("p",[t._v("markword 8字节 + 开启classPointer压缩后classpointer 4字节 + instance data int 4字节 + 开启普通对象指针压缩后String4字节 + padding 4  = "),a("strong",[t._v("24字节")])])]),t._v(" "),a("h3",{attrs:{id:"synchronized-锁升级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-锁升级"}},[t._v("#")]),t._v(" Synchronized  锁升级")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247488320&idx=1&sn=6fd5cddf2a0ff68fe00ccc834e90521b&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("synchronized"),a("OutboundLink")],1),t._v(" 锁在JDK6以后有四种状态，"),a("code",[t._v("无锁")]),t._v("、"),a("code",[t._v("偏向锁")]),t._v("、"),a("code",[t._v("轻量级锁")]),t._v("、"),a("code",[t._v("重量级锁")]),t._v("。这几个状态会随着竞争状态逐渐升级，"),a("strong",[t._v("锁可以升级但不能降级")]),t._v("，但是偏向锁状态可以被重置为无锁状态。大致升级过程如下")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/vicxsl/img/raw/master/img/1629445723867/image-20210820154843442.png",alt:"image-20210820154843442"}})]),t._v(" "),a("p",[a("strong",[t._v("锁对比")]),t._v("：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("锁状态")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("优点")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("缺点")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("适用场景")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("偏向锁")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("加锁解锁无需额外消耗，跟非同步方法时间相差纳秒级别")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("如果竞争线程多，会带来额外的锁撤销的消耗")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("基本没有其他线程竞争的同步场景")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("轻量级锁")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("竞争的线程不会阻塞而是在自旋，可提高程序响应速度")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("如果一直无法获得会自旋消耗CPU")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("少量线程竞争，持有锁时间不长，追求响应速度")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("重量级锁")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("线程竞争不会导致CPU自旋跟消耗CPU资源")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("线程阻塞，响应时间长")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("很多线程竞争锁，切锁持有时间长，追求吞吐量时候")])])])]),t._v(" "),a("h3",{attrs:{id:"synchronized-无法禁止指令重排-却能保证有序性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-无法禁止指令重排-却能保证有序性"}},[t._v("#")]),t._v(" Synchronized 无法禁止指令重排，却能保证有序性")]),t._v(" "),a("p",[t._v("指令重排是程序运行时 "),a("strong",[t._v("解释器")]),t._v(" 跟 "),a("strong",[t._v("CPU")]),t._v(" 自带的加速手段，可能导致语句执行顺序跟预想不一样情况，但是无论如何重排 也必须遵循 "),a("strong",[t._v("as-if-serial")]),t._v("。")]),t._v(" "),a("p",[t._v("避免重排的最简单方法就是"),a("strong",[t._v("禁止处理器优化跟指令重排")]),t._v("，比如"),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247485656&idx=1&sn=03c2eedc1f749e719230cfa87952c51c&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("volatile"),a("OutboundLink")],1),t._v("中用内存屏障实现，syn是关键字级别的"),a("strong",[t._v("排他且可重入锁")]),t._v("，当某个线程执行到一段被syn修饰的代码之前，会先进行加锁，执行完之后再进行解锁。")]),t._v(" "),a("p",[t._v("当某段代码被"),a("strong",[t._v("syn")]),t._v("加锁后跟解锁前，其他线程是无法再次获得锁的，只有这条加锁线程可以重复获得该锁。所以代码在执行的时候是单线程执行的，这就满足了"),a("strong",[t._v("as-if-serial")]),t._v("语义，正是因为有了"),a("strong",[t._v("as-if-serial")]),t._v("语义保证，单线程的"),a("strong",[t._v("有序性")]),t._v("就天然存在了。")]),t._v(" "),a("h3",{attrs:{id:"wait-虚假唤醒"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wait-虚假唤醒"}},[t._v("#")]),t._v(" wait 虚假唤醒")]),t._v(" "),a("p",[t._v("虚假唤醒定义：")]),t._v(" "),a("ol",[a("li",[t._v("当一个条件满足时，很多线程都被唤醒了，但只有其中部分是有用的唤醒，其它的唤醒是不对的，")]),t._v(" "),a("li",[t._v("比如说买卖货物，如果商品本来没有货物，所有消费者线程都在"),a("strong",[t._v("wait")]),t._v("状态卡顿呢。这时突然生产者进了一件商品，唤醒了所有挂起的消费者。可能导致所有的消费者都继续执行wait下面的代码，出现错误调用。")])]),t._v(" "),a("p",[t._v("因为 "),a("strong",[t._v("if")]),t._v(" 只会执行一次，执行完会接着向下执行 "),a("strong",[t._v("if")]),t._v(" 下面的。而 "),a("strong",[t._v("while")]),t._v(" 不会，直到条件满足才会向下执行 "),a("strong",[t._v("while")]),t._v("下面的。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzU1NDU4NDQ1OQ==&mid=2247484609&idx=1&sn=d8b3ec0f2b768b6aade60861021d373f&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("虚假唤醒"),a("OutboundLink")],1),t._v(" 解决办法：")]),t._v(" "),a("blockquote",[a("p",[t._v("在调用 "),a("strong",[t._v("wait")]),t._v(" 的时候要用 "),a("strong",[t._v("while")]),t._v(" 不能用 "),a("strong",[t._v("if")]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"notify-底层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#notify-底层"}},[t._v("#")]),t._v(" notify()底层")]),t._v(" "),a("ol",[a("li",[t._v("为何"),a("strong",[t._v("wait")]),t._v("跟"),a("strong",[t._v("notify")]),t._v("必须要加"),a("strong",[t._v("synchronized")]),t._v("锁")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("synchronized")]),t._v(" 代码块通过 "),a("strong",[t._v("javap")]),t._v(" 生成的字节码中包含"),a("strong",[t._v("monitorenter")]),t._v(" 和  "),a("strong",[t._v("monitorexit")]),t._v(" 指令线程，执行 "),a("strong",[t._v("monitorenter")]),t._v(" 指令可以获取对象的 "),a("strong",[t._v("monitor")]),t._v("，而 "),a("strong",[t._v("wait")]),t._v(" 方法通过调用 "),a("strong",[t._v("native")]),t._v(" 方法 "),a("strong",[t._v("wait(0)")]),t._v(" 实现，该注释说："),a("strong",[t._v("The current thread must own this object's monitor")]),t._v("。")])]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("notify")]),t._v(" 执行后立马唤醒线程吗?")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("notify/notifyAll")]),t._v(" 调用时并不会真正释放对象锁，只是把等待中的线程唤醒然后放入到对象的锁池中，但是锁池中的所有线程都不会立马运行，只有拥有锁的线程运行完代码块释放锁，别的线程拿到锁才可以运行。")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" object "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("notifyAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO 死循环会导致 无法释放锁。")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("h1",{attrs:{id:"aqs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aqs"}},[t._v("#")]),t._v(" AQS")]),t._v(" "),a("h3",{attrs:{id:"高频考点线程交替打印"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高频考点线程交替打印"}},[t._v("#")]),t._v(" 高频考点线程交替打印")]),t._v(" "),a("p",[t._v("目标是实现两个线程交替打印，实现字母在前数字在后。你可以用信号量、Synchronized关键字跟Lock实现，这里用 "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247489331&idx=1&sn=89e47f0f93ddf3e1089ab11a2b42ce20&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("ReentrantLock"),a("OutboundLink")],1),t._v("简单实现：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("concurrent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CountDownLatch")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("concurrent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("locks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Condition")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("concurrent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("locks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Lock")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("concurrent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("locks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Main")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Lock")]),t._v(" lock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Condition")]),t._v(" c1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newCondition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Condition")]),t._v(" c2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newCondition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CountDownLatch")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CountDownLatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ABCDEFGHI"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" ca "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toCharArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123456789"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toCharArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("countDown")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" caa "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ca"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("caa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     c2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("await")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("await")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" naa "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     c2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("naa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("await")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    c2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n  t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  t2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br"),a("span",{staticClass:"line-number"},[t._v("42")]),a("br"),a("span",{staticClass:"line-number"},[t._v("43")]),a("br"),a("span",{staticClass:"line-number"},[t._v("44")]),a("br"),a("span",{staticClass:"line-number"},[t._v("45")]),a("br"),a("span",{staticClass:"line-number"},[t._v("46")]),a("br"),a("span",{staticClass:"line-number"},[t._v("47")]),a("br"),a("span",{staticClass:"line-number"},[t._v("48")]),a("br"),a("span",{staticClass:"line-number"},[t._v("49")]),a("br"),a("span",{staticClass:"line-number"},[t._v("50")]),a("br"),a("span",{staticClass:"line-number"},[t._v("51")]),a("br"),a("span",{staticClass:"line-number"},[t._v("52")]),a("br"),a("span",{staticClass:"line-number"},[t._v("53")]),a("br"),a("span",{staticClass:"line-number"},[t._v("54")]),a("br"),a("span",{staticClass:"line-number"},[t._v("55")]),a("br")])]),a("h3",{attrs:{id:"aqs底层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aqs底层"}},[t._v("#")]),t._v(" AQS底层")]),t._v(" "),a("p",[t._v("上题我们用到了"),a("strong",[t._v("ReentrantLock")]),t._v("、"),a("strong",[t._v("Condition")]),t._v(" ，但是它们的底层是如何实现的呢？其实他们是基于"),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247489331&idx=1&sn=89e47f0f93ddf3e1089ab11a2b42ce20&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("AQS"),a("OutboundLink")],1),t._v("的 "),a("strong",[t._v("同步队列")]),t._v(" 跟 "),a("strong",[t._v("等待队列")]),t._v(" 实现的！")]),t._v(" "),a("h5",{attrs:{id:"aqs-同步队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aqs-同步队列"}},[t._v("#")]),t._v(" AQS 同步队列")]),t._v(" "),a("p",[t._v("学"),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247489331&idx=1&sn=89e47f0f93ddf3e1089ab11a2b42ce20&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("AQS"),a("OutboundLink")],1),t._v(" 前 "),a("strong",[t._v("CAS")]),t._v(" + "),a("strong",[t._v("自旋")]),t._v(" + "),a("strong",[t._v("LockSupport")]),t._v(" + "),a("strong",[t._v("模板模式")]),t._v(" 必须会，目的是方便理解源码，感觉比 "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247488320&idx=1&sn=6fd5cddf2a0ff68fe00ccc834e90521b&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("Synchronized"),a("OutboundLink")],1),t._v(" 简单，因为是单纯的 "),a("strong",[t._v("Java")]),t._v(" 代码。个人理解"),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247489331&idx=1&sn=89e47f0f93ddf3e1089ab11a2b42ce20&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("AQS"),a("OutboundLink")],1),t._v("具有如下几个特点：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[a("strong",[t._v("在AQS 同步队列中 -1 表示线程在睡眠状态")])]),t._v(" "),a("li",[a("strong",[t._v("当前Node节点线程会把前一个Node.ws = -1。当前节点把前面节点ws设置为-1，你可以理解为：你自己能知道自己睡着了吗？只能是别人看到了发现你睡眠了！")])]),t._v(" "),a("li",[a("strong",[t._v("持有锁的线程永远不在队列中。")])]),t._v(" "),a("li",[a("strong",[t._v("在AQS队列中第二个才是最先排队的线程。")])]),t._v(" "),a("li",[a("strong",[t._v("如果是交替型任务或者单线程任务，即使用了Lock也不会涉及到AQS 队列。")])]),t._v(" "),a("li",[a("strong",[t._v("不到万不得已不要轻易park线程，很耗时的！所以排队的头线程会自旋的尝试几个获取锁。")])]),t._v(" "),a("li",[a("strong",[t._v("并不是说 CAS 一定比SYN好，如果高并发执行时间久 ，用SYN好， 因为SYN底层用了wait() 阻塞后是不消耗CPU资源的。如果锁竞争不激烈说明自旋不严重 此时用CAS。")])]),t._v(" "),a("li",[a("strong",[t._v("在AQS中也要尽可能避免调用CLH队列，因为CLH可能会调用到park，相对来耗时。")])])])]),t._v(" "),a("p",[a("strong",[t._v("ReentrantLock底层")]),t._v("：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/vicxsl/img/raw/master/img/1629446028302/image-20210820155347859.png",alt:"image-20210820155347859"}})]),t._v(" "),a("h5",{attrs:{id:"aqs-等待队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aqs-等待队列"}},[t._v("#")]),t._v(" AQS 等待队列")]),t._v(" "),a("p",[t._v("当我们调用 "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247489331&idx=1&sn=89e47f0f93ddf3e1089ab11a2b42ce20&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("Condition"),a("OutboundLink")],1),t._v(" 里的 "),a("strong",[t._v("await")]),t._v(" 跟 "),a("strong",[t._v("signal")]),t._v(" 时候底层其实是这样走的。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/vicxsl/img/raw/master/img/1629446089549/image-20210820155449150.png",alt:"image-20210820155449150"}})]),t._v(" "),a("h1",{attrs:{id:"线程思考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程思考"}},[t._v("#")]),t._v(" 线程思考")]),t._v(" "),a("h3",{attrs:{id:"变量建议使用栈封闭"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量建议使用栈封闭"}},[t._v("#")]),t._v(" 变量建议使用栈封闭")]),t._v(" "),a("blockquote",[a("p",[t._v("所有的变量都是在方法内部声明的，这些变量都处于栈封闭状态。方法调用的时候会有一个栈桢，这是一个独立的空间。在这个独立空间创建跟使用则绝对是安全的，但是注意不要返回该变量哦！")])]),t._v(" "),a("h3",{attrs:{id:"防止线程饥饿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防止线程饥饿"}},[t._v("#")]),t._v(" 防止线程饥饿")]),t._v(" "),a("p",[t._v("优先级低的线程总是得不到执行机会，一般要保证资源充足、公平的分配资源、防止持有锁的线程长时间执行。")]),t._v(" "),a("h3",{attrs:{id:"开发步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开发步骤"}},[t._v("#")]),t._v(" 开发步骤")]),t._v(" "),a("p",[t._v("多线程编程不要为了用而用，引入多线程后会引入额外的开销。量应用程序性能一般：服务时间、延迟时间、吞吐量、可伸缩性。做应用的时候可以一般按照如下步骤：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("先确保保证程序的正确性跟健壮性，确实达不到性能要求再想如何提速。")]),t._v(" "),a("li",[t._v("一定要以测试为基准。")]),t._v(" "),a("li",[t._v("一个程序中串行的部分永远是有的.")]),t._v(" "),a("li",[t._v("装逼利器："),a("strong",[t._v("阿姆达尔定律")]),t._v(" S=1/(1-a+a/n)")])])]),t._v(" "),a("p",[t._v("阿姆达尔定律中 a为并行计算部分所占比例，n为并行处理结点个数：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("当1-a=0时，(即没有串行，只有并行)最大加速比s=n；")]),t._v(" "),a("li",[t._v("当a=0时（即只有串行，没有并行），最小加速比s=1；")]),t._v(" "),a("li",[t._v("当n无穷大时，极限加速比s→ 1/（1-a），这就是加速比的上限。例如，若串行代码占整个代码的25%，则并行处理的总体性能不可能超过4。")])])]),t._v(" "),a("h3",{attrs:{id:"影响性能因素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#影响性能因素"}},[t._v("#")]),t._v(" 影响性能因素")]),t._v(" "),a("ol",[a("li",[t._v("缩小锁的范围，能锁方法块尽量不要锁函数")]),t._v(" "),a("li",[t._v("减少锁的粒度跟锁分段，比如ConcurrentHashMap的实现。")]),t._v(" "),a("li",[t._v("读多写少时候用读写锁，可提高十倍性能。")]),t._v(" "),a("li",[t._v("用CAS操作来替换重型锁。")]),t._v(" "),a("li",[t._v("尽量用JDK自带的"),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247488541&idx=1&sn=442f57533fcd9a9d9241ef955fd6301f&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("常见并发容器"),a("OutboundLink")],1),t._v("，底层已经足够优化了。")])]),t._v(" "),a("h1",{attrs:{id:"end"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#end"}},[t._v("#")]),t._v(" End")]),t._v(" "),a("p",[t._v("都看到这了，送你几个高频面试题吧。")]),t._v(" "),a("blockquote",[a("ol",[a("li",[a("strong",[t._v("synchronized")]),t._v("跟"),a("strong",[t._v("ReentrantLock")]),t._v("使用区别跟底层实现以及重入底层原理")]),t._v(" "),a("li",[t._v("描述下锁的四种状态跟升级过程")]),t._v(" "),a("li",[a("strong",[t._v("CAS")]),t._v("是什么？"),a("strong",[t._v("CAS")]),t._v("的弊端是什么？")]),t._v(" "),a("li",[t._v("你对"),a("strong",[t._v("volatile")]),t._v("的理解，可见性跟指令重排咋实现的。")]),t._v(" "),a("li",[t._v("一个对象创建过程是怎么样的。对象在内存中如何分布的，看 "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&mid=2247489183&idx=1&sn=02ab3551c473bd2c8429862e3689a94b&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("JVM"),a("OutboundLink")],1),t._v(" 即可。")]),t._v(" "),a("li",[t._v("聊一聊单例模式，为什么"),a("strong",[t._v("DCL")]),t._v("要用"),a("strong",[t._v("volatile")])]),t._v(" "),a("li",[t._v("Object 0 = new Object() 在内存中占据几个字节")]),t._v(" "),a("li",[t._v("你对"),a("strong",[t._v("as-if-serial")]),t._v("跟"),a("strong",[t._v("happpends-before")]),t._v("的理解")]),t._v(" "),a("li",[a("strong",[t._v("ThreadLocal")]),t._v("说一说，咋解决内存泄露")]),t._v(" "),a("li",[t._v("自旋锁一定比重量级锁效率高吗？偏向锁是否效率一定提高。")]),t._v(" "),a("li",[t._v("线程池聊一聊如何用 注意细节，如何实现。")]),t._v(" "),a("li",[t._v("你对"),a("strong",[t._v("JMM")]),t._v("理解？")]),t._v(" "),a("li",[a("strong",[t._v("Synchronized")]),t._v(" 可以实现指令重排么？它是如何保证有序性的？")]),t._v(" "),a("li",[t._v("聊一聊"),a("strong",[t._v("AQS")]),t._v("，为什么 "),a("strong",[t._v("AQS")]),t._v(" 底层是 "),a("strong",[t._v("CAS")]),t._v(" + "),a("strong",[t._v("Volatile")])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);