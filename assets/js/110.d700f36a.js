(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{548:function(n,e,t){"use strict";t.r(e);var r=t(16),a=function(n){n.options.__data__block__={markmap_1a96284d:"# ZooKeeper\n* `一个开源的分布式协调服务，为分布式应用提供一致性服务`\n* 分布式一致性的概念\n    - 顺序一致性\n        - 通过zxid保证全局有序\n    - 原子性\n    - 单一视图\n    - 可靠性\n    - 实时性（最终一致性）\n- 主要功能\n    - 文件系统\n        - 多层级的节点命名空间\n        - 节点称为znode\n            - PERSISTENT-持久节点\n            - EPHEMERAL-临时节点\n            - PERSISTENT_SEQUENTIAL-持久顺序节点\n            - EPHEMERAL_SEQUENTIAL-临时顺序节点_\n        - 维护在内存中\n            - 保证高吞吐和低延迟\n            - 不能存放大量的数据\n    - 通知机制\n        - 原子广播机制\n            - 恢复模式\n            - 广播模式\n        - Watcher 机制\n            -  Watcher 监听\n                - 出现指定事件\n                - 发送事件通知\n                - 客户端根据Watcher通知状态和事件类型响应\n            - 工作机制：\n                * 客户端注册 watcher\n                * 服务端处理 watcher\n                * 客户端回调 watcher\n            - 实现\n                - 客户端注册Watcher 实现\n                - 服务端处理 Watcher 实现\n                - 客户端回调 Watcher\n        -\n- 服务器角色\n    - Leader`领导者状态`\n        - 事务请求的唯一调度和处理者，保证集群事务处理的顺序性\n        - 集群内部各服务的调度者\n    - Follower`跟随者状态`\n        - 处理客户端的非事务请求，转发事务请求给 Leader 服务器\n        - 参与事务请求 Proposal 的投票\n        - 参与 Leader 选举投票\n    - Observer`观察者状态`\n        - 3.0 版本以后引入的一个服务器角色，在不影响集群事务处理能力的基础上提升集群的非事务处理能力\n        - 处理客户端的非事务请求，转发事务请求给 Leader 服务器\n        - 不参与任何形式的投票\n- 应用场景\n    - 数据发布/订阅\n        - 动态获取配置\n        - 特点\n            - 数据量小\n            - 数据内容在运行时会动态更新\n            - 集群所有机器共享，配置一致\n        - 实现\n            - 数据存储\n            - 数据获取，创建Watcher\n            - 数据变更，通知客户端\n    - 负载均衡\n    - 命名服务\n        - 创建全局路径\n        - 指向服务的地址，远程对象\n    - 分布式协调/通知\n        - 改变节点状态\n        - 通知注册了节点watcher的客户端\n    - 集群管理\n        - 创建临时目录节点\n        - 机器挂掉，其创建的临时节点删除\n        - 某个兄弟目录被删除\n    - Master选举\n    - 分布式锁\n        - 保持独占\n            - znode看作一把锁\n            - createznode的方式来实现\n            - 所有客户端创建 /distribute_lock 节点_\n            - 成功创建的拥有锁\n            - 删除distribute_lock  节点就释放锁_\n        - 控制时序\n            - 创建临时顺序目录节点\n                - 编号最小的获得锁\n                - 用完删除\n    - 分布式队列\n- 重点\n    - 如何保证顺序一致性\n        - 全局递增的事务 Id\n        - zxid 实际上是一个 64 位的数字\n    - 分布式集群为什么会有Master主节点\n        - 某些业务逻辑只需要集群的某一台机器执行\n        - 其余机器共享结果\n        - 减少重复计算，提高性能\n    - zk节点宕机如何处理\n        - 推荐配置不少于3个服务器\n        -  Follower 宕机，还有 2 台服务器提供访问\n        - Leader 宕机，Zookeeper 会选举出新的 Leader\n        - 超过半数的节点正常，集群可以正常提高服务"}},o=Object(r.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h1",{attrs:{id:"zookeeper"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper"}},[this._v("#")]),this._v(" ZooKeeper")]),this._v(" "),e("Markmap",{attrs:{id:"markmap_1a96284d",code:this.$dataBlock.markmap_1a96284d}})],1)}),[],!1,null,null,null);"function"==typeof a&&a(o);e.default=o.exports}}]);