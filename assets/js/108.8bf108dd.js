(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{545:function(t,n,o){"use strict";o.r(n);var i=o(16),r=function(t){t.options.__data__block__={markmap_1a96284d:"* 什么是Spring Cloud `化了分布式系统基础设施的开发，如服务发现注册、配置中心、智能路由、消息总线、负载均衡、断路器、数据监控等`\n- 优点\n\t- 产出于Spring大家族，Spring在企业级开发框架中无人能敌。\n\t- 组件丰富，功能齐全。\n\t- 服务拆分粒度更细，耦合度比较低，提高开发效率。\n\t- 减轻团队的成本，可以并行开发。\n\t- 适于互联网时代，产品迭代周期更短。\n- 缺点\n\t- 微服务过多，治理成本高，不利于维护系统。\n\t- 分布式系统开发的成本高（容错，分布式事务等）对团队挑战大。\n- 主要项目\n\t- Spring Cloud Config\n\t\t- 集中配置管理工具，Git来存储配置。\n\t- Spring Cloud Netflix\n\t\t- Eureka：服务治理组件，包括服务端的注册中心和客户端的服务发现机制；\n\t\t- Ribbon：负载均衡的服务调用组件，具有多种负载均衡调用策略；\n\t\t- Hystrix：服务容错组件，实现了断路器模式；\n\t\t- Feign：基于Ribbon和Hystrix的声明式服务调用组件；\n\t\t- Zuul：API网关组件，对请求提供路由及过滤功能。\n\t- Spring Cloud Zookeeper\n\t\t- 基于Apache Zookeeper的服务治理组件。\n\t- Spring Cloud Gateway\n\t\t- API网关组件，对请求提供路由及过滤功能。\n- 组件\n\t- SpringBoot和SpringCloud的区别\n\t\t- SpringBoot\n\t\t\t- 专注于快速方便的开发单个个体微服务。\n\t\t- SpringCloud\n\t\t\t- 关注全局的服务治理框架。\n\t- Spring Cloud 和dubbo区别\n\t\t-  dubbo\n\t\t\t- RPC调用方式\n\t\t\t- zookeeper作为注册中心\n\t\t- Spring Cloud\n\t\t\t- Rest Api调用方式\n\t\t\t- eureka或者zookeeper作为注册中心\n\t\t\t- 有Zuul路由网关\n\t- Spring Cloud断路器的作用\n\t\t- 半开:短时间内 有恢复迹象 断路器会将部分请求发给该服务\n\t\t- 关闭：当服务一直处于正常状态 能正常调用\n\t- 网关 `Nginx、Zuul、Gateway`\n\t\t- 路由转发\n\t\t- 权限校验\n\t\t- 限流控制\n\t\t- 安全控制黑名单和白名单\n\t- 负载平衡 `Ribbon`\n\t\t- 负载平衡旨在优化资源使用"}},e=Object(i.a)({},(function(){var t=this.$createElement,n=this._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h1",{attrs:{id:"spring-cloud"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud"}},[this._v("#")]),this._v(" Spring Cloud")]),this._v(" "),n("Markmap",{attrs:{id:"markmap_1a96284d",code:this.$dataBlock.markmap_1a96284d}})],1)}),[],!1,null,null,null);"function"==typeof r&&r(e);n.default=e.exports}}]);