(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{598:function(s,n,t){"use strict";t.r(n);var a=t(16),e=Object(a.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"python语法总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python语法总结"}},[s._v("#")]),s._v(" Python语法总结")]),s._v(" "),t("p",{attrs:{align:"center"}},[t("img",{attrs:{src:"https://www.python.org/static/img/landing-docs.8af25927be37.png?1576869008",width:"500"}})]),s._v(" "),t("p",[s._v("Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。\nPython 的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。")]),s._v(" "),t("p",[s._v("以下对已经学习的Python语法做一个回顾")]),s._v(" "),t("hr"),s._v(" "),t("ul",[t("li",[t("p",[s._v("Python 是一种解释型语言： 这意味着开发过程中没有了编译这个环节。类似于PHP和Perl语言。")])]),s._v(" "),t("li",[t("p",[s._v("Python 是交互式语言： 这意味着，您可以在一个 Python 提示符 >>> 后直接执行代码。")])]),s._v(" "),t("li",[t("p",[s._v("Python 是面向对象语言: 这意味着Python支持面向对象的风格或代码封装在对象的编程技术。")])]),s._v(" "),t("li",[t("p",[s._v("Python 是初学者的语言：Python 对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到 WWW 浏览器再到游戏。")])])]),s._v(" "),t("h4",{attrs:{id:"python-特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python-特点"}},[s._v("#")]),s._v(" Python 特点")]),s._v(" "),t("ul",[t("li",[s._v("**1.易于学习：**Python有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。")]),s._v(" "),t("li",[s._v("**2.易于阅读：**Python代码定义的更清晰。")]),s._v(" "),t("li",[s._v("**3.易于维护：**Python的成功在于它的源代码是相当容易维护的。")]),s._v(" "),t("li",[s._v("**4.一个广泛的标准库：**Python的最大的优势之一是丰富的库，跨平台的，在UNIX，Windows和Macintosh兼容很好。")]),s._v(" "),t("li",[s._v("**5.互动模式：**互动模式的支持，您可以从终端输入执行代码并获得结果的语言，互动的测试和调试代码片断。")]),s._v(" "),t("li",[s._v("**6.可移植：**基于其开放源代码的特性，Python已经被移植（也就是使其工作）到许多平台。")]),s._v(" "),t("li",[s._v("**7.可扩展：**如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用C或C++完成那部分程序，然后从你的Python程序中调用。")]),s._v(" "),t("li",[s._v("**8.数据库：**Python提供所有主要的商业数据库的接口。")]),s._v(" "),t("li",[s._v("**9.GUI编程：**Python支持GUI可以创建和移植到许多系统调用。")]),s._v(" "),t("li",[t("strong",[s._v("10.可嵌入:")]),s._v(' 你可以将Python嵌入到C/C++程序，让你的程序的用户获得"脚本化"的能力。')])]),s._v(" "),t("h2",{attrs:{id:"python-应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python-应用"}},[s._v("#")]),s._v(" Python 应用")]),s._v(" "),t("ul",[t("li",[s._v("Youtube - 视频社交网站")]),s._v(" "),t("li",[s._v("Reddit - 社交分享网站")]),s._v(" "),t("li",[s._v("Dropbox - 文件分享服务")]),s._v(" "),t("li",[s._v("豆瓣网 - 图书、唱片、电影等文化产品的资料数据库网站")]),s._v(" "),t("li",[s._v("知乎 - 一个问答网站")]),s._v(" "),t("li",[s._v("果壳 - 一个泛科技主题网站")]),s._v(" "),t("li",[s._v("Bottle - Python微Web框架")]),s._v(" "),t("li",[s._v("EVE - 网络游戏EVE大量使用Python进行开发")]),s._v(" "),t("li",[s._v("Blender - 使用Python作为建模工具与GUI语言的开源3D绘图软件")]),s._v(" "),t("li",[s._v("Inkscape - 一个开源的SVG矢量图形编辑器。")]),s._v(" "),t("li",[s._v("...")])]),s._v(" "),t("h2",{attrs:{id:"python3-基础语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python3-基础语法"}},[s._v("#")]),s._v(" Python3 基础语法")]),s._v(" "),t("h3",{attrs:{id:"注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[s._v("#")]),s._v(" 注释")]),s._v(" "),t("p",[s._v("Python中单行注释以 "),t("strong",[s._v("#")]),s._v(" 开头，实例如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('#!/usr/bin/python3   \n# 第一个注释 \nprint ("Hello, Python!") # 第二个注释\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("多行注释可以用多个 # 号，还有 ''' 和 \"\"\"：")]),s._v(" "),t("h3",{attrs:{id:"行与缩进"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#行与缩进"}},[s._v("#")]),s._v(" 行与缩进")]),s._v(" "),t("p",[s._v("python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。")]),s._v(" "),t("p",[s._v("缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('if True:\n    print ("True")\nelse:\n    print ("False")\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"多行语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多行语句"}},[s._v("#")]),s._v(" 多行语句")]),s._v(" "),t("p",[s._v("Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠(\\)来实现多行语句，例如：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("total = item_one + \\\n        item_two + \\\n        item_three\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"数字-number-类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数字-number-类型"}},[s._v("#")]),s._v(" 数字(Number)类型")]),s._v(" "),t("p",[s._v("python中数字有四种类型：整数、布尔型、浮点数和复数。")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("int")]),s._v(" (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。")]),s._v(" "),t("li",[t("strong",[s._v("bool")]),s._v(" (布尔), 如 True。")]),s._v(" "),t("li",[t("strong",[s._v("float")]),s._v(" (浮点数), 如 1.23、3E-2")]),s._v(" "),t("li",[t("strong",[s._v("complex")]),s._v(" (复数), 如 1 + 2j、 1.1 + 2.2j")])]),s._v(" "),t("h3",{attrs:{id:"多个语句构成代码组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多个语句构成代码组"}},[s._v("#")]),s._v(" 多个语句构成代码组")]),s._v(" "),t("p",[s._v("缩进相同的一组语句构成一个代码块，我们称之代码组。\n像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。\n我们将首行及后面的代码组称为一个子句(clause)。")]),s._v(" "),t("p",[s._v("如下实例：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("if expression : \n   suite\nelif expression : \n   suite \nelse : \n   suite\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"print-输出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#print-输出"}},[s._v("#")]),s._v(" Print 输出")]),s._v(" "),t("p",[s._v("print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 "),t("strong",[s._v('end=""')]),s._v("：")]),s._v(" "),t("h3",{attrs:{id:"import-与-from-import"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#import-与-from-import"}},[s._v("#")]),s._v(" import 与 from...import")]),s._v(" "),t("p",[s._v("在 python 用 import 或者 from...import 来导入相应的模块。")]),s._v(" "),t("p",[s._v("将整个模块(somemodule)导入，格式为： import somemodule\n从某个模块中导入某个函数,格式为： from somemodule import somefunction\n从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc\n将某个模块中的全部函数导入，格式为： from somemodule import *")]),s._v(" "),t("h1",{attrs:{id:"python3-基本数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python3-基本数据类型"}},[s._v("#")]),s._v(" Python3 基本数据类型")]),s._v(" "),t("p",[s._v("Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。")]),s._v(" "),t("p",[s._v('在 Python 中，变量就是变量，它没有类型，我们所说的"类型"是变量所指的内存中对象的类型。')]),s._v(" "),t("h3",{attrs:{id:"多个变量赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多个变量赋值"}},[s._v("#")]),s._v(" 多个变量赋值")]),s._v(" "),t("p",[s._v("Python允许你同时为多个变量赋值。")]),s._v(" "),t("p",[t("code",[s._v("a = b = c = 1")])]),s._v(" "),t("h3",{attrs:{id:"标准数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标准数据类型"}},[s._v("#")]),s._v(" 标准数据类型")]),s._v(" "),t("p",[s._v("Python3 中有六个标准的数据类型：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("Number（数字）")])]),s._v(" "),t("li",[t("code",[s._v("String（字符串）")])]),s._v(" "),t("li",[t("code",[s._v("List（列表）")])]),s._v(" "),t("li",[t("code",[s._v("Tuple（元组）")])]),s._v(" "),t("li",[t("code",[s._v("Set（集合）")])]),s._v(" "),t("li",[t("code",[s._v("Dictionary（字典）")])])]),s._v(" "),t("p",[s._v("Python3 的六个标准数据类型中：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("**不可变数据（3 个）：**Number（数字）、String（字符串）、Tuple（元组）；")]),s._v(" "),t("p",[s._v("不可变数据,修改值就会改变内存指向的地址对象.")])]),s._v(" "),t("li",[t("p",[s._v("**可变数据（3 个）：**List（列表）、Dictionary（字典）、Set（集合）;")])])]),s._v(" "),t("h3",{attrs:{id:"number-数字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#number-数字"}},[s._v("#")]),s._v(" Number（数字）")]),s._v(" "),t("p",[s._v("Python3 支持 "),t("strong",[s._v("int、float、bool、complex（复数）")]),s._v("。")]),s._v(" "),t("p",[s._v("在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。")]),s._v(" "),t("p",[s._v("像大多数语言一样，数值类型的赋值和计算都是很直观的。")]),s._v(" "),t("p",[s._v("内置的 "),t("code",[s._v("type()")]),s._v(" 函数可以用来查询变量所指的对象类型。此外还可以用 "),t("strong",[t("code",[s._v("isinstance")])]),s._v(" 来判断。")]),s._v(" "),t("p",[s._v("您也可以使用del语句删除一些对象引用")]),s._v(" "),t("p",[s._v("del语句的语法是：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("del var1[,var2[,var3[....,varN]]] \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"数值运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数值运算"}},[s._v("#")]),s._v(" 数值运算")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v(">>> 5 + 4  # 加法\n9\n>>> 4.3 - 2 # 减法\n2.3\n>>> 3 * 7  # 乘法\n21\n>>> 2 / 4  # 除法，得到一个浮点数\n0.5\n>>> 2 // 4 # 除法，得到一个整数\n0\n>>> 17 % 3 # 取余\n2\n>>> 2 ** 5 # 乘方\n32\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("h3",{attrs:{id:"string-字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-字符串"}},[s._v("#")]),s._v(" String（字符串）")]),s._v(" "),t("p",[s._v("Python中的字符串用单引号 ' 或双引号 \" 括起来，同时使用反斜杠 \\ 转义特殊字符。")]),s._v(" "),t("p",[s._v("字符串的截取的语法格式如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("变量[头下标:尾下标]\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("索引值以 0 为开始值，-1 为从末尾的开始位置。")]),s._v(" "),t("p",[t("code",[s._v("加号 +")]),s._v(" 是字符串的连接符， "),t("code",[s._v("星号 *")]),s._v(" 表示复制当前字符串，与之结合的数字为复制的次数。")]),s._v(" "),t("p",[s._v("Python 使用反"),t("code",[s._v("斜杠 \\")]),s._v(" 转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 "),t("code",[s._v("r")]),s._v("，表示原始字符串.")]),s._v(" "),t("h3",{attrs:{id:"list-列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list-列表"}},[s._v("#")]),s._v(" List（列表）")]),s._v(" "),t("p",[s._v("List（列表） 是 Python 中使用最频繁的数据类型。")]),s._v(" "),t("p",[s._v("列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。")]),s._v(" "),t("p",[s._v("列表是写在"),t("code",[s._v("方括号 []")]),s._v(" 之间、用逗号分隔开的元素列表。")]),s._v(" "),t("p",[s._v("和字符串一样，列"),t("code",[s._v("表同样可以被索引和截取")]),s._v("，列表被截取后返回一个包含所需元素的新列表。")]),s._v(" "),t("p",[s._v("列表截取的语法格式如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("变量[头下标:尾下标]\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("索引值以 0 为开始值，-1 为从末尾的开始位置。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2014/08/list_slicing1_new1.png",alt:"img"}})]),s._v(" "),t("p",[t("strong",[s._v("加号 + 是列表连接运算符，星号 * 是重复操作。")]),s._v(" (这里和字符串的操作类似)")]),s._v(" "),t("p",[s._v("List 内置了有很多方法，例如 append()、pop() 等等，这在后面会讲到。")]),s._v(" "),t("p",[s._v("Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串。")]),s._v(" "),t("p",[s._v("如果第三个参数为负数表示逆向读取，以下实例用于翻转字符串：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("def reverseWords(input):\n     \n    # 通过空格将字符串分隔符，把各个单词分隔为列表\n    inputWords = input.split(\" \")\n \n    # 翻转字符串\n    # 假设列表 list = [1,2,3,4],  \n    # list[0]=1, list[1]=2 ，而 -1 表示最后一个元素 list[-1]=4 ( 与 list[3]=4 一样)\n    # inputWords[-1::-1] 有三个参数\n    # 第一个参数 -1 表示最后一个元素\n    # 第二个参数为空，表示移动到列表末尾\n    # 第三个参数为步长，-1 表示逆向\n    inputWords=inputWords[-1::-1]\n \n    # 重新组合字符串\n    output = ' '.join(inputWords)\n     \n    return output\n \nif __name__ == \"__main__\":\n    input = 'I like runoob'\n    rw = reverseWords(input)\n    print(rw)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("h3",{attrs:{id:"tuple-元组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tuple-元组"}},[s._v("#")]),s._v(" Tuple（元组）")]),s._v(" "),t("p",[s._v("元组（tuple）与列表类似，不同之处在于"),t("strong",[s._v("元组的元素不能修改")]),s._v("。元组写在小括号 () 里，元素之间用逗号隔开。")]),s._v(" "),t("p",[s._v("原因是Python的变量不需要声明类型，所以无法从类型定义上将元组和列表区分，从定义方式上去区分这2种类型。"),t("strong",[s._v("元组中的元素类型也可以不相同")]),s._v(" :")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("`#!/usr/bin/python3\n\ntuple = ( 'abcd', 786 , 2.23, 'runoob', 70.2  )\ntinytuple = (123, 'runoob')\n\nprint (tuple)             # 输出完整元组\nprint (tuple[0])          # 输出元组的第一个元素\nprint (tuple[1:3])        # 输出从第二个元素开始到第三个元素\nprint (tuple[2:])         # 输出从第三个元素开始的所有元素\nprint (tinytuple * 2)     # 输出两次元组\nprint (tuple + tinytuple) # 连接元组\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取（看上面，这里不再赘述）。")]),s._v(" "),t("p",[s._v("其实，可以把字符串看作一种特殊的元组。")]),s._v(" "),t("p",[s._v("虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。")]),s._v(" "),t("p",[t("strong",[s._v("string、list 和 tuple 都属于 sequence（序列）。")])]),s._v(" "),t("p",[s._v("所以使用语法上有一些类似，序列在数学领域，是被排成一列的对象；这样，每个元素不是在其他元素之前，就是在其他元素之后。这里，元素之间的顺序非常重要。")]),s._v(" "),t("h3",{attrs:{id:"set-集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set-集合"}},[s._v("#")]),s._v(" Set（集合）")]),s._v(" "),t("p",[s._v("集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。")]),s._v(" "),t("p",[s._v("基本功能是进行成员关系测试和删除重复元素。")]),s._v(" "),t("p",[s._v("可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。")]),s._v(" "),t("p",[s._v("集合和列表的区别是，列表是无序的。")]),s._v(" "),t("h3",{attrs:{id:"dictionary-字典"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dictionary-字典"}},[s._v("#")]),s._v(" Dictionary（字典）")]),s._v(" "),t("p",[s._v("字典（dictionary）是Python中另一个非常有用的内置数据类型 。列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于："),t("strong",[s._v("字典当中的元素是通过键来存取的，而不是通过偏移存取")]),s._v("。 字典是一种"),t("strong",[s._v("映射类型")]),s._v("，字典用 { } 标识，它是一个无序的 "),t("strong",[s._v("键(key) : 值(value)")]),s._v(" 的集合。"),t("strong",[s._v("（类似Java的Map映射）")])]),s._v(" "),t("p",[s._v("键(key)必须使用不可变类型，在同一个字典中，键(key)必须是唯一的。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#!/usr/bin/python3\n\ndict = {}\ndict['one'] = \"1 - 菜鸟教程\"\ndict[2]     = \"2 - 菜鸟工具\"\n\ntinydict = {'name': 'runoob','code':1, 'site': 'www.runoob.com'}\n\n\nprint (dict['one'])       # 输出键为 'one' 的值\nprint (dict[2])           # 输出键为 2 的值\nprint (tinydict)          # 输出完整的字典\nprint (tinydict.keys())   # 输出所有键\nprint (tinydict.values()) # 输出所有值\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("构造函数 dict() 可以直接从键值对序列中构建字典如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v(">>> dict([('Runoob', 1), ('Google', 2), ('Taobao', 3)])\n{'Runoob': 1, 'Google': 2, 'Taobao': 3}\n>>> {x: x**2 for x in (2, 4, 6)}\n{2: 4, 4: 16, 6: 36}\n>>> dict(Runoob=1, Google=2, Taobao=3)\n{'Runoob': 1, 'Google': 2, 'Taobao': 3}\n>>>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h3",{attrs:{id:"python数据类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python数据类型转换"}},[s._v("#")]),s._v(" Python数据类型转换")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("函数")]),s._v(" "),t("th",[s._v("描述")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("[int(x "),t("a",{attrs:{href:"https://www.runoob.com/python3/python-func-int.html",target:"_blank",rel:"noopener noreferrer"}},[s._v(",base])"),t("OutboundLink")],1)]),s._v(" "),t("td",[s._v("将x转换为一个整数")])]),s._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://www.runoob.com/python3/python-func-float.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("float(x)"),t("OutboundLink")],1)]),s._v(" "),t("td",[s._v("将x转换到一个浮点数")])]),s._v(" "),t("tr",[t("td",[s._v("[complex(real "),t("a",{attrs:{href:"https://www.runoob.com/python3/python-func-complex.html",target:"_blank",rel:"noopener noreferrer"}},[s._v(",imag])"),t("OutboundLink")],1)]),s._v(" "),t("td",[s._v("创建一个复数")])]),s._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://www.runoob.com/python3/python-func-str.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("str(x)"),t("OutboundLink")],1)]),s._v(" "),t("td",[s._v("将对象 x 转换为字符串")])]),s._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://www.runoob.com/python3/python-func-repr.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("repr(x)"),t("OutboundLink")],1)]),s._v(" "),t("td",[s._v("将对象 x 转换为表达式字符串")])]),s._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://www.runoob.com/python3/python-func-eval.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("eval(str)"),t("OutboundLink")],1)]),s._v(" "),t("td",[s._v("用来计算在字符串中的有效Python表达式,并返回一个对象")])]),s._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://www.runoob.com/python3/python3-func-tuple.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("tuple(s)"),t("OutboundLink")],1)]),s._v(" "),t("td",[s._v("将序列 s 转换为一个元组")])]),s._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://www.runoob.com/python3/python3-att-list-list.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("list(s)"),t("OutboundLink")],1)]),s._v(" "),t("td",[s._v("将序列 s 转换为一个列表")])]),s._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://www.runoob.com/python3/python-func-set.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("set(s)"),t("OutboundLink")],1)]),s._v(" "),t("td",[s._v("转换为可变集合")])]),s._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://www.runoob.com/python3/python-func-dict.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("dict(d)"),t("OutboundLink")],1)]),s._v(" "),t("td",[s._v("创建一个字典。d 必须是一个 (key, value)元组序列。")])]),s._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://www.runoob.com/python3/python-func-frozenset.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("frozenset(s)"),t("OutboundLink")],1)]),s._v(" "),t("td",[s._v("转换为不可变集合")])]),s._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://www.runoob.com/python3/python-func-chr.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("chr(x)"),t("OutboundLink")],1)]),s._v(" "),t("td",[s._v("将一个整数转换为一个字符")])]),s._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://www.runoob.com/python3/python-func-ord.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("ord(x)"),t("OutboundLink")],1)]),s._v(" "),t("td",[s._v("将一个字符转换为它的整数值")])]),s._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://www.runoob.com/python3/python-func-hex.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("hex(x)"),t("OutboundLink")],1)]),s._v(" "),t("td",[s._v("将一个整数转换为一个十六进制字符串")])]),s._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://www.runoob.com/python3/python-func-oct.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("oct(x)"),t("OutboundLink")],1)]),s._v(" "),t("td",[s._v("将一个整数转换为一个八进制字符串")])])])]),s._v(" "),t("h2",{attrs:{id:"python3-编程第一步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python3-编程第一步"}},[s._v("#")]),s._v(" Python3 编程第一步")]),s._v(" "),t("p",[s._v("在前面的教程中我们已经学习了一些 Python3 的基本语法知识，下面我们尝试来写一个斐波纳契数列。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#!/usr/bin/python3\n \n# Fibonacci series: 斐波纳契数列\n# 两个元素的总和确定了下一个数\na, b = 0, 1\nwhile b < 10:\n    print(b)\n    a, b = b, a+b\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("其中代码 a, b = b, a+b 的计算方式为先计算右边表达式，然后同时赋值给左边，等价于：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("n=b\nm=a+b\na=n\nb=m\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("执行以上程序，输出结果为：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1\n1\n2\n3\n5\n8\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("这个例子介绍了几个新特征。")]),s._v(" "),t("p",[s._v("第一行包含了一个复合赋值：变量 a 和 b 同时得到新值 0 和 1。最后一行再次使用了同样的方法，可以看到，右边的表达式会在赋值变动之前执行。右边表达式的执行顺序是从左往右的。"),t("code",[s._v("Python语法简洁精妙")])]),s._v(" "),t("p",[t("strong",[s._v("end 关键字")]),s._v("\n关键字end可以用于将结果输出到同一行，或者在输出的末尾添加不同的字符。")]),s._v(" "),t("h2",{attrs:{id:"python3-条件控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python3-条件控制"}},[s._v("#")]),s._v(" Python3 条件控制")]),s._v(" "),t("p",[s._v("Python 条件语句是通过一条或多条语句的执行结果（True 或者 False）来决定执行的代码块。")]),s._v(" "),t("p",[s._v("可以通过下图来简单了解条件语句的执行过程:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2013/11/if-condition.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("代码执行过程：")]),s._v(" "),t("h3",{attrs:{id:"if-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#if-语句"}},[s._v("#")]),s._v(" if 语句")]),s._v(" "),t("p",[s._v("Python中if语句的一般形式如下所示：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("if condition_1:\n    statement_block_1\nelif condition_2:\n    statement_block_2\nelse:\n    statement_block_3\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("ul",[t("li",[t("p",[s._v("1、每个条件后面要使用冒号 :，表示接下来是满足条件后要执行的语句块。")])]),s._v(" "),t("li",[t("p",[s._v("2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。")])]),s._v(" "),t("li",[t("p",[s._v("3、在Python中没有switch – case语句。")]),s._v(" "),t("p",[s._v("以下为if中常用的操作运算符:")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("操作符")]),s._v(" "),t("th",[s._v("描述")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("code",[s._v("<")])]),s._v(" "),t("td",[s._v("小于")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("<=")])]),s._v(" "),t("td",[s._v("小于或等于")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v(">")])]),s._v(" "),t("td",[s._v("大于")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v(">=")])]),s._v(" "),t("td",[s._v("大于或等于")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("==")])]),s._v(" "),t("td",[s._v("等于，比较两个值是否相等")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("!=")])]),s._v(" "),t("td",[s._v("不等于")])])])])])]),s._v(" "),t("h3",{attrs:{id:"if-嵌套"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#if-嵌套"}},[s._v("#")]),s._v(" if 嵌套")]),s._v(" "),t("p",[s._v("在嵌套 if 语句中，可以把 if...elif...else 结构放在另外一个 if...elif...else 结构中。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("if 表达式1:\n    语句\n    if 表达式2:\n        语句\n    elif 表达式3:\n        语句\n    else:\n        语句\nelif 表达式4:\n    语句\nelse:\n    语句\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("h3",{attrs:{id:"python3-循环语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python3-循环语句"}},[s._v("#")]),s._v(" Python3 循环语句")]),s._v(" "),t("p",[s._v("本章节将为大家介绍 Python 循环语句的使用。")]),s._v(" "),t("p",[s._v("Python 中的循环语句有 for 和 while。\nPython 循环语句的控制结构图如下所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2014/05/006faQNTgw1f5wnm06h3ug30ci08cake.gif",alt:"img"}})]),s._v(" "),t("p",[s._v("同样需要注意冒号和缩进。另外，在 Python 中没有 do..while 循环。")]),s._v(" "),t("h3",{attrs:{id:"while-循环使用-else-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#while-循环使用-else-语句"}},[s._v("#")]),s._v(" while 循环使用 else 语句")]),s._v(" "),t("p",[s._v("在 while … else 在条件语句为 false 时执行 else 的语句块。")]),s._v(" "),t("p",[s._v("语法格式如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("while <expr>:\n    <statement(s)>\nelse:\n    <additional_statement(s)>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"for-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-语句"}},[s._v("#")]),s._v(" for 语句")]),s._v(" "),t("p",[s._v("Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("for <variable> in <sequence>:\n    <statements>\nelse:\n    <statements>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("以下 for 实例中使用了 break 语句，break 语句用于跳出当前循环体：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('#!/usr/bin/python3\n \nsites = ["Baidu", "Google","Runoob","Taobao"]\nfor site in sites:\n    if site == "Runoob":\n        print("菜鸟教程!")\n        break\n    print("循环数据 " + site)\nelse:\n    print("没有循环数据!")\nprint("完成循环!")\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h3",{attrs:{id:"range-函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#range-函数"}},[s._v("#")]),s._v(" range()函数")]),s._v(" "),t("p",[s._v("如果你需要遍历数字序列，可以使用内置range()函数。它会生成数列，例如:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v(">>>for i in range(5):\n...     print(i)\n...\n\n0\n1\n2\n3\n4\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("您可以结合range()和len()函数以遍历一个序列的索引,如下所示:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v(">>>a = ['Google', 'Baidu', 'Runoob', 'Taobao', 'QQ']\n>>> for i in range(len(a)):\n...     print(i, a[i])\n... \n0 Google\n1 Baidu\n2 Runoob\n3 Taobao\n4 QQ\n>>>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h3",{attrs:{id:"pass-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pass-语句"}},[s._v("#")]),s._v(" pass 语句")]),s._v(" "),t("p",[s._v("Python pass是空语句，是为了保持程序结构的完整性。")]),s._v(" "),t("p",[s._v("pass 不做任何事情，一般用做占位语句，如下实例")]),s._v(" "),t("h1",{attrs:{id:"python3-迭代器与生成器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python3-迭代器与生成器"}},[s._v("#")]),s._v(" Python3 迭代器与生成器")]),s._v(" "),t("h3",{attrs:{id:"iter-迭代器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#iter-迭代器"}},[s._v("#")]),s._v(" iter 迭代器")]),s._v(" "),t("p",[s._v("迭代是Python最强大的功能之一，是访问集合元素的一种方式。")]),s._v(" "),t("p",[s._v("迭代器是一个可以记住遍历的位置的对象。")]),s._v(" "),t("p",[s._v("迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。")]),s._v(" "),t("p",[s._v("迭代器有两个基本的方法："),t("strong",[s._v("iter()")]),s._v(" 和 "),t("strong",[s._v("next()")]),s._v("。")]),s._v(" "),t("p",[s._v("字符串，列表或元组对象都可用于创建迭代器：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#!/usr/bin/python3\n \nimport sys         # 引入 sys 模块\n \nlist=[1,2,3,4]\nit = iter(list)    # 创建迭代器对象\n \nwhile True:\n    try:\n        print (next(it))\n    except StopIteration:\n        sys.exit()\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("h3",{attrs:{id:"创建一个迭代器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建一个迭代器"}},[s._v("#")]),s._v(" 创建一个迭代器")]),s._v(" "),t("p",[s._v("把一个类作为一个迭代器使用需要在类中实现两个方法 "),t("strong",[s._v("iter")]),s._v("() 与 "),t("strong",[s._v("next")]),s._v("() 。")]),s._v(" "),t("p",[s._v("如果你已经了解的面向对象编程，就知道类都有一个构造函数，Python 的构造函数为 "),t("strong",[s._v("init")]),s._v("(), 它会在对象初始化的时候执行。")]),s._v(" "),t("p",[s._v("更多内容查阅："),t("a",{attrs:{href:"https://www.runoob.com/python3/python3-class.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Python3 面向对象"),t("OutboundLink")],1)]),s._v(" "),t("p",[t("strong",[s._v("iter")]),s._v("() 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 "),t("strong",[s._v("next")]),s._v("() 方法并通过 StopIteration 异常标识迭代的完成。")]),s._v(" "),t("p",[t("strong",[s._v("next")]),s._v("() 方法（Python 2 里是 next()）会返回下一个迭代器对象。")]),s._v(" "),t("p",[s._v("创建一个返回数字的迭代器，初始值为 1，逐步递增 1：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class MyNumbers:\n  def __iter__(self):\n    self.a = 1\n    return self\n \n  def __next__(self):\n    x = self.a\n    self.a += 1\n    return x\n \nmyclass = MyNumbers()\nmyiter = iter(myclass)\n \nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("h3",{attrs:{id:"stopiteration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stopiteration"}},[s._v("#")]),s._v(" StopIteration")]),s._v(" "),t("p",[s._v("StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 "),t("strong",[s._v("next")]),s._v("() 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。")]),s._v(" "),t("p",[s._v("在 20 次迭代后停止执行：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class MyNumbers:\n  def __iter__(self):\n    self.a = 1\n    return self\n \n  def __next__(self):\n    if self.a <= 20:\n      x = self.a\n      self.a += 1\n      return x\n    else:\n      raise StopIteration\n \nmyclass = MyNumbers()\nmyiter = iter(myclass)\n \nfor x in myiter:\n  print(x)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("h3",{attrs:{id:"生成器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生成器"}},[s._v("#")]),s._v(" 生成器")]),s._v(" "),t("p",[s._v("在 Python 中，使用了 yield 的函数被称为生成器（generator）。")]),s._v(" "),t("p",[s._v("跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。")]),s._v(" "),t("p",[s._v("在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。")]),s._v(" "),t("p",[s._v("调用一个生成器函数，返回的是一个迭代器对象。")]),s._v(" "),t("p",[s._v("以下实例使用 yield 实现斐波那契数列：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('#!/usr/bin/python3\n \nimport sys\n \ndef fibonacci(n): # 生成器函数 - 斐波那契\n    a, b, counter = 0, 1, 0\n    while True:\n        if (counter > n): \n            return\n        yield a\n        a, b = b, a + b\n        counter += 1\nf = fibonacci(10) # f 是一个迭代器，由生成器返回生成\n \nwhile True:\n    try:\n        print (next(f), end=" ")\n    except StopIteration:\n        sys.exit()\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[s._v("执行以上程序，输出结果如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("0 1 1 2 3 5 8 13 21 34 55\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"python3函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python3函数"}},[s._v("#")]),s._v(" Python3函数")]),s._v(" "),t("p",[s._v("函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。")]),s._v(" "),t("p",[s._v("函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，比如print()。但你也可以自己创建函数，这被叫做用户自定义函数。")]),s._v(" "),t("h3",{attrs:{id:"定义一个函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义一个函数"}},[s._v("#")]),s._v(" 定义一个函数")]),s._v(" "),t("p",[s._v("你可以定义一个由自己想要功能的函数，以下是简单的规则：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("函数代码块以 "),t("strong",[s._v("def")]),s._v(" 关键词开头，后接函数标识符名称和圆括号 "),t("strong",[s._v("()")]),s._v("。")])]),s._v(" "),t("li",[t("p",[s._v("任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。")])]),s._v(" "),t("li",[t("p",[s._v("函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。")])]),s._v(" "),t("li",[t("p",[s._v("函数内容以冒号 : 起始，并且缩进。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("return [表达式]")]),s._v(" 结束函数，选择性地返回一个值给调用方，不带表达式的 return 相当于返回 None。")]),s._v(" "),t("p",[t("strong",[s._v("这里不需要声明返回值类型，参数类型或void")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2014/05/py-tup-10-26-1.png",alt:"img"}})])])]),s._v(" "),t("h3",{attrs:{id:"参数传递"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数传递"}},[s._v("#")]),s._v(" 参数传递")]),s._v(" "),t("p",[s._v("在 python 中，类型属于对象，变量是没有类型的")]),s._v(" "),t("h3",{attrs:{id:"可更改-mutable-与不可更改-immutable-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可更改-mutable-与不可更改-immutable-对象"}},[s._v("#")]),s._v(" 可更改(mutable)与不可更改(immutable)对象")]),s._v(" "),t("p",[s._v("在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。")]),s._v(" "),t("ul",[t("li",[t("p",[t("code",[s._v("不可变类型")]),s._v("：变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变 a 的值，相当于新生成了 a。")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("可变类型")]),s._v("：变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。")]),s._v(" "),t("p",[s._v("python 函数的参数传递：")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("不可变类型")]),s._v("：类似 C++ 的值传递，如 整数、字符串、元组。如 fun(a)，传递的只是 a 的值，没有影响 a 对象本身。如果在 fun(a)）内部修改 a 的值，则是新生成来一个 a。")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("可变类型")]),s._v("：类似 C++ 的引用传递，如 列表，字典。如 fun(la)，则是将 la 真正的传过去，修改后 fun 外部的 la 也会受影响")])])]),s._v(" "),t("p",[s._v("python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。")]),s._v(" "),t("h3",{attrs:{id:"python-传不可变对象实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python-传不可变对象实例"}},[s._v("#")]),s._v(" python 传不可变对象实例")]),s._v(" "),t("p",[s._v("通过 "),t("strong",[s._v("id()")]),s._v(" 函数来查看内存地址变化：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("def change(a):\n    print(id(a))   # 指向的是同一个对象\n    a=10\n    print(id(a))   # 一个新对象\n \na=1\nprint(id(a))\nchange(a)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h3",{attrs:{id:"参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[s._v("#")]),s._v(" 参数")]),s._v(" "),t("p",[s._v("以下是调用函数时可使用的正式参数类型：")]),s._v(" "),t("ul",[t("li",[s._v("必需参数")]),s._v(" "),t("li",[s._v("关键字参数")]),s._v(" "),t("li",[s._v("默认参数")]),s._v(" "),t("li",[s._v("不定长参数")])]),s._v(" "),t("h3",{attrs:{id:"必需参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#必需参数"}},[s._v("#")]),s._v(" 必需参数")]),s._v(" "),t("p",[s._v("必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。")]),s._v(" "),t("p",[s._v("调用 printme() 函数，你必须传入一个参数，不然会出现语法错误：")]),s._v(" "),t("h3",{attrs:{id:"默认参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#默认参数"}},[s._v("#")]),s._v(" 默认参数")]),s._v(" "),t("p",[s._v("调用函数时，如果没有传递参数，则会使用默认参数。以下实例中如果没有传入 age 参数，则使用默认值：")]),s._v(" "),t("h3",{attrs:{id:"不定长参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不定长参数"}},[s._v("#")]),s._v(" 不定长参数")]),s._v(" "),t("p",[s._v("你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述 2 种参数不同，声明时不会命名。基本语法如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('def functionname([formal_args,] *var_args_tuple ):\n   "函数_文档字符串"\n   function_suite\n   return [expression]\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。")]),s._v(" "),t("p",[s._v("还有一种就是参数带两个星号 **基本语法如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('def functionname([formal_args,] **var_args_dict ):\n   "函数_文档字符串"\n   function_suite\n   return [expression]\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("加了两个星号 ** 的参数会以字典的形式导入。")]),s._v(" "),t("h3",{attrs:{id:"匿名函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#匿名函数"}},[s._v("#")]),s._v(" 匿名函数")]),s._v(" "),t("p",[s._v("python 使用 lambda 来创建匿名函数。")]),s._v(" "),t("p",[s._v("所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("lambda 只是一个表达式，函数体比 def 简单很多。")])]),s._v(" "),t("li",[t("p",[s._v("lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。")])]),s._v(" "),t("li",[t("p",[s._v("lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。")])]),s._v(" "),t("li",[t("p",[s._v("虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。")]),s._v(" "),t("h3",{attrs:{id:"语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[s._v("#")]),s._v(" 语法")]),s._v(" "),t("p",[s._v("lambda 函数的语法只包含一个语句，如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('#!/usr/bin/python3\n \n# 可写函数说明\nsum = lambda arg1, arg2: arg1 + arg2\n \n# 调用sum函数\nprint ("相加后的值为 : ", sum( 10, 20 ))\nprint ("相加后的值为 : ", sum( 20, 20 ))\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])])])]),s._v(" "),t("h3",{attrs:{id:"return语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#return语句"}},[s._v("#")]),s._v(" return语句")]),s._v(" "),t("p",[t("strong",[s._v("return [表达式]")]),s._v(" 语句用于退出函数，选择性地向调用方返回一个表达式。不带参数值的return语句返回None。之前的例子都没有示范如何返回数值，以下实例演示了 return 语句的用法：")]),s._v(" "),t("h3",{attrs:{id:"强制位置参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#强制位置参数"}},[s._v("#")]),s._v(" 强制位置参数")]),s._v(" "),t("p",[s._v("Python3.8 新增了一个函数形参语法 / 用来指明函数形参必须使用指定位置参数，不能使用关键字参数的形式。")]),s._v(" "),t("p",[s._v("在以下的例子中，形参 a 和 b 必须使用指定位置参数，c 或 d 可以是位置形参或关键字形参，而 e 或 f 要求为关键字形参:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("def f(a, b, /, c, d, *, e, f):\n    print(a, b, c, d, e, f)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("以下使用方法是正确的:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("f(10, 20, 30, d=40, e=50, f=60)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);