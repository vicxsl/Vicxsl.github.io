(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{547:function(n,e,o){"use strict";o.r(e);var t=o(16),a=function(n){n.options.__data__block__={markmap_1a96284d:"# Dubbo \n* `高性能、轻量级的开源 RPC 框架，提供服务自动注册、自动发现等高效服务治理方案`\n\n* 使用场景\n    - 透明化的远程方法调用，只需要配置简单即可实现\n    - 软负载均衡及容错机制\n    - 服务自动注册与发现，基于接口名查询服务者的ip地址\n- 核心功能\n    - Remoting：网络通信框架\n    - Cluster：服务框架\n        - 基于接口方法的透明远程过程调用\n        - 负载均衡\n            - Random LoadBalance: 随机选取提供者策略\n            - RoundRobin LoadBalance: 轮循选取提供者策略\n            - LeastActive LoadBalance: 最少活跃调用策略\n            - ConstantHash LoadBalance: 一致性 Hash 策略\n        - 失败容错\n        - 地址路由\n        - 动态配置\n    - Registry：服务注册\n        - 基于注册中心目录服务\n        - 动态的查找服务提供方\n- Dubbo服务注册发现流程\n    - **服务容器Container**负责启动，加载，运行服务提供者\n    - **服务提供者Provider**在启动时，向注册中心注册自己提供的服务。\n    - **服务消费者Consumer**在启动时，向注册中心订阅自己所需的服务。\n    - **注册中心Registry**返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。\n        - Zookeeper 注册中心\n        - Multicast 注册中心\n        - Redis 注册中心\n        - Simple 注册中心\n    - **服务消费者Consumer**，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。\n    - **服务消费者Consume**r和提供者Provider，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心Monitor。\n- 核心配置\n    - <dubbo:service/>服务配置`暴露一个服务`\n    - <dubbo:reference/> 引用配置 `创建一个远程服务代理`\n    - <dubbo:protocol/>协议配置`用于配置提供服务的协议信息`\n    - <dubbo:application/>应用配置 `用于配置当前应用信息`\n    - <dubbo:registry/>注册中心 `配置用于配置连接注册中心相关信息`\n    - <dubbo:method/> 方法配置 `用于 ServiceConfig 和 ReferenceConfig 指定方法级的配置信息`\n- Dubbo 支持的协议\n    - Dubbo：\n        - 单一长连接和 NIO 异步通讯。\n        - 适合大并发小数据量的服务调用。\n        - TCP传输协议。\n        - **推荐使用**\n    - RMI\n        - 采用 JDK 标准的 RMI 协议实现\n        - 使用 Java 标准序列化机制\n        - 阻塞式短连接。\n    - WebService\n        - 基于 WebService 的远程调用协议\n        - 集成 CXF 实现\n        - 基于HTTP传输\n    - HTTP\n        - 基于 Http 表单提交的远程调用协议\n        - 多个短连接\n        - 传输协议 HTTP\n    - Hessian：集成 Hessian 服务，基于 HTTP 通讯\n    - Memcache：基于 Memcache实现的 RPC 协议\n    - Redis：基于 Redis 实现的RPC协议\n- RPC`远程过程调用协议`\n    - 长链接\n        - 每次通信无需进行3次握手\n        - 减少网络开销\n    - 注册中心\n        - 监控管理\n        - 支持发布，下线接口\n        - 调用方无感知\n    - 安全性\n- 重点\n    - Dubbo 和 Spring Cloud 有什么关系？\n        - Dubbo\n            -  定位服务治理。\n            - 关注点主要在于服务的调用，流量分发、流量监控和熔断。\n            - 通信速度快。\n        - Spring Cloud\n            -  是打造一个生态。\n            - 考虑的是微服务治理，依托了 Spring、Spring Boot 的优势之上。\n            - 基于Http 协议提供Rest接口，请求会有更大的报文，带宽更多。\n            - 服务之间的耦合度小，不存在代码级别的强依赖。\n    - 服务调用超时会怎么样？\n        - `dubbo 在调用服务不成功时，默认是会重试两次。`"}},i=Object(t.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h1",{attrs:{id:"dubbo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dubbo"}},[this._v("#")]),this._v(" Dubbo")]),this._v(" "),e("Markmap",{attrs:{id:"markmap_1a96284d",code:this.$dataBlock.markmap_1a96284d}})],1)}),[],!1,null,null,null);"function"==typeof a&&a(i);e.default=i.exports}}]);